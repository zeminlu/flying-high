.TH "inc/unistd.h" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/unistd.h \- 
.PP
Definitions for all UNIX Standard system calls functions.  

.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBssize_t\fP \fBwrite\fP (int fileds, const void *buffer, \fBsize_t\fP count)"
.br
.RI "\fI\fBwrite()\fP writes 'count' bytes from the buffer pointed by 'buffer' into the file descripted by the file descriptor 'fileds'. \fP"
.ti -1c
.RI "\fBssize_t\fP \fBread\fP (int fileds, void *buffer, \fBsize_t\fP count)"
.br
.RI "\fI\fBread()\fP reads 'count' bytes from the file descripted by the file descriptor 'fileds' and saves it into the buffer pointed by 'buffer' \fP"
.ti -1c
.RI "\fBsize_t\fP \fBfread\fP (\fBFILE\fP *stream, void *buffer, \fBsize_t\fP count)"
.br
.RI "\fIIdem to the \fBread()\fP function, but from the given stream. \fP"
.ti -1c
.RI "\fBsize_t\fP \fBfwrite\fP (\fBFILE\fP *stream, void *buffer, \fBsize_t\fP count)"
.br
.RI "\fIIdem to the \fBwrite()\fP function, but to the given stream. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definitions for all UNIX Standard system calls functions. 

\fBAuthor:\fP
.RS 4
Luciano Zemin, Nicolás Magni, Nicolás Purita 
.RE
.PP

.PP
Definition in file \fBunistd.h\fP.
.SH "Function Documentation"
.PP 
.SS "\fBsize_t\fP fread (\fBFILE\fP * stream, void * buffer, \fBsize_t\fP count)"
.PP
Idem to the \fBread()\fP function, but from the given stream. \fBParameters:\fP
.RS 4
\fIstream\fP The stream where to read from. 
.br
\fIbuffer\fP A pointer to the buffer where the information is going to written. 
.br
\fIcount\fP Number of bytes that will be written in the buffeer from the file.
.RE
.PP
\fBReturns:\fP
.RS 4
The amount of bytes that were successfully read from the file or -1 in case of error.
.RE
.PP
Use: 
.PP
.nf
                       if ( read(stream, buffer, VIDEO_SIZE) != VIDEO_SIZE )
                                        printf('Error: video memory could not be read\n');

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBfwrite()\fP 
.RE
.PP

.SS "\fBsize_t\fP fwrite (\fBFILE\fP * stream, void * buffer, \fBsize_t\fP count)"
.PP
Idem to the \fBwrite()\fP function, but to the given stream. \fBParameters:\fP
.RS 4
\fIstream\fP The stream where to write to. 
.br
\fIbuffer\fP pointer to the buffer where the information to be written is hold. 
.br
\fIcount\fP number of bytes that will be written in the file from the buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
The amount of bytes that were successfully read from the file or -1 in case of error.
.RE
.PP
Use: 
.PP
.nf
                      char * message = 'Hello World!\n';
                        write(stream, (const void *)message, strlen(message));

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBfread()\fP 
.RE
.PP

.SS "\fBssize_t\fP read (int fileds, void * buffer, \fBsize_t\fP count)"
.PP
\fBread()\fP reads 'count' bytes from the file descripted by the file descriptor 'fileds' and saves it into the buffer pointed by 'buffer' \fBParameters:\fP
.RS 4
\fIfileds\fP the file descriptor for the file where the data is going to be read. 
.br
\fIbuffer\fP pointer to the buffer where the information is going to written. 
.br
\fIcount\fP number of bytes that will be written in the buffeer from the file.
.RE
.PP
\fBReturns:\fP
.RS 4
the amount of bytes that were successfully read from the file or -1 in case of error.
.RE
.PP
Example 
.PP
.nf
                          if ( read(STDIN, buffer, VIDEO_SIZE) != VIDEO_SIZE )
                                        printf('Error: video memory could not be read\n');

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBwrite()\fP 
.RE
.PP

.SS "\fBssize_t\fP write (int fileds, const void * buffer, \fBsize_t\fP count)"
.PP
\fBwrite()\fP writes 'count' bytes from the buffer pointed by 'buffer' into the file descripted by the file descriptor 'fileds'. \fBParameters:\fP
.RS 4
\fIfileds\fP the file descriptor for the file where the data is going to be written. 
.br
\fIbuffer\fP pointer to the buffer where the information to be written is hold. 
.br
\fIcount\fP number of bytes that will be written in the file from the buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
the amount of bytes successfully written in the file or -1 in case of error.
.RE
.PP
Example: 
.PP
.nf
                           char * message = 'Hello World!\n';
                                write(STDOUT, (const void *)message, strlen(message));

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBread()\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
