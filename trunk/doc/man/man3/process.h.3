.TH "inc/process.h" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/process.h \- 
.PP
All the process functions that invoke syscalls.  

.SH SYNOPSIS
.br
.PP
\fC#include 'syscall.h'\fP
.br
\fC#include 'int80.h'\fP
.br
\fC#include 'types.h'\fP
.br
\fC#include 'string.h'\fP
.br
\fC#include 'sysProcess.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBmemmap\fP (int isKernel)"
.br
.RI "\fIBrief. \fP"
.ti -1c
.RI "\fBpid_t\fP \fBcreateProcess\fP (char *name, \fBpfunc_t\fP main, void *args, int level)"
.br
.RI "\fICreates a new process into the system and sets it ready to run. The process will be created in unatomic mode(preemptive mode) and with tty -1. \fP"
.ti -1c
.RI "void \fBexit\fP (int status)"
.br
.RI "\fIThis function terminates the calling process and status is returned to whom is waiting for the calling process to exit. \fP"
.ti -1c
.RI "\fBtty_t\fP \fBsetTty\fP (\fBpid_t\fP pid, \fBtty_t\fP tty)"
.br
.RI "\fISets the given process tty id. \fP"
.ti -1c
.RI "\fBtty_t\fP \fBgetTty\fP (\fBpid_t\fP pid)"
.br
.RI "\fIRetrieves the given process pid's tty. \fP"
.ti -1c
.RI "\fBtty_t\fP \fBsetTTYFocusedProcess\fP (\fBpid_t\fP pid, \fBtty_t\fP tty)"
.br
.RI "\fISets the given tty focused process with the given pid process. \fP"
.ti -1c
.RI "\fBpid_t\fP \fBgetTTYFocusedProcess\fP (\fBtty_t\fP tty)"
.br
.RI "\fIRetrieves the given tty focused process pid. \fP"
.ti -1c
.RI "\fBpid_t\fP \fBgetpid\fP (void)"
.br
.RI "\fIRetrieves the calling process' pid. \fP"
.ti -1c
.RI "\fBpid_t\fP \fBgetppid\fP ()"
.br
.RI "\fIRetrieves the calling process' parent pid. \fP"
.ti -1c
.RI "int \fBwait\fP (int *status)"
.br
.RI "\fIBlocks the calling process until a child returns. \fP"
.ti -1c
.RI "int \fBwaitpid\fP (\fBpid_t\fP pid, int *status)"
.br
.RI "\fIThis function blocks the calling process until the given pid child returns. \fP"
.ti -1c
.RI "int \fBkill\fP (int pid)"
.br
.RI "\fIKills the given pid process. \fP"
.ti -1c
.RI "int \fBsetTTYMode\fP (\fBpid_t\fP pid, int mode)"
.br
.RI "\fISets the tty mode of the given pid process. \fP"
.ti -1c
.RI "int \fBgetTTYMode\fP (\fBpid_t\fP pid)"
.br
.RI "\fIRetrieves the given pid process tty mode. \fP"
.ti -1c
.RI "int \fBsetLevel\fP (int level)"
.br
.RI "\fISets the calling process level. \fP"
.ti -1c
.RI "int \fBgetLevel\fP ()"
.br
.RI "\fIRetrieves the calling process' level. \fP"
.ti -1c
.RI "int \fBgetPriority\fP ()"
.br
.RI "\fIRetrieves the calling process' priority. \fP"
.ti -1c
.RI "int \fBsetPriority\fP (\fBpid_t\fP pid, int prio)"
.br
.RI "\fISets the pid process priority. \fP"
.ti -1c
.RI "unsigned \fBtime\fP (void)"
.br
.RI "\fIRetrieves the amount of miliseconds that the calling process' had the processor. \fP"
.ti -1c
.RI "unsigned \fBupTime\fP ()"
.br
.RI "\fIRetrieves the amount of ticks since the system boot. \fP"
.ti -1c
.RI "int \fBsetProcessAtomicity\fP (\fBpid_t\fP pid, int atomic)"
.br
.RI "\fISets the given pid process' atomicity. \fP"
.in -1c
.SH "Detailed Description"
.PP 
All the process functions that invoke syscalls. 

\fBAuthor:\fP
.RS 4
Luciano Zemin, Nicolás Magni, Nicolás Purita 
.RE
.PP

.PP
Definition in file \fBprocess.h\fP.
.SH "Function Documentation"
.PP 
.SS "\fBpid_t\fP createProcess (char * name, \fBpfunc_t\fP main, void * args, int level)"
.PP
Creates a new process into the system and sets it ready to run. The process will be created in unatomic mode(preemptive mode) and with tty -1. \fBParameters:\fP
.RS 4
\fIname\fP The process' name 
.br
\fImain\fP The process' main function. Must Not Be NULL. 
.br
\fIargs\fP A pointer to an argument list. 
.br
\fIlevel\fP FOREGROUND or BACKGROUND.
.RE
.PP
\fBReturns:\fP
.RS 4
The new process' pid or -1 in case of error. 
.RE
.PP

.PP
Definition at line 22 of file process.c.
.SS "void exit (int status)"
.PP
This function terminates the calling process and status is returned to whom is waiting for the calling process to exit. \fBParameters:\fP
.RS 4
\fIstatus\fP The process' exit status. 
.RE
.PP

.PP
Definition at line 26 of file process.c.
.SS "int getLevel ()"
.PP
Retrieves the calling process' level. \fBReturns:\fP
.RS 4
The calling process' level.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetLevel()\fP 
.RE
.PP

.PP
Definition at line 79 of file process.c.
.SS "\fBpid_t\fP getpid (void)"
.PP
Retrieves the calling process' pid. \fBReturns:\fP
.RS 4
The calling process' pid. 
.RE
.PP

.PP
Definition at line 47 of file process.c.
.SS "\fBpid_t\fP getppid ()"
.PP
Retrieves the calling process' parent pid. \fBReturns:\fP
.RS 4
The calling process' parent pid. 
.RE
.PP

.PP
Definition at line 51 of file process.c.
.SS "int getPriority ()"
.PP
Retrieves the calling process' priority. \fBReturns:\fP
.RS 4
The calling process' priority.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetPriority()\fP 
.RE
.PP

.PP
Definition at line 83 of file process.c.
.SS "\fBtty_t\fP getTty (\fBpid_t\fP pid)"
.PP
Retrieves the given process pid's tty. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process.
.RE
.PP
\fBReturns:\fP
.RS 4
The tty id.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTty()\fP 
.RE
.PP

.PP
Definition at line 35 of file process.c.
.SS "\fBpid_t\fP getTTYFocusedProcess (\fBtty_t\fP tty)"
.PP
Retrieves the given tty focused process pid. \fBParameters:\fP
.RS 4
\fItty\fP The tty id.
.RE
.PP
\fBReturns:\fP
.RS 4
The pid of the tty focused process.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTTYFocusedProcess()\fP 
.RE
.PP

.PP
Definition at line 43 of file process.c.
.SS "int getTTYMode (\fBpid_t\fP pid)"
.PP
Retrieves the given pid process tty mode. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process whose tty mode will be retrieved.
.RE
.PP
\fBReturns:\fP
.RS 4
The tty mode.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetTTYMode()\fP 
.RE
.PP

.PP
Definition at line 71 of file process.c.
.SS "int kill (int pid)"
.PP
Kills the given pid process. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process to be killed.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 63 of file process.c.
.SS "void * memmap (int isKernel)"
.PP
Brief. \fBParameters:\fP
.RS 4
\fIisKernel\fP ParamBrief.
.RE
.PP
\fBReturns:\fP
.RS 4
Description.
.RE
.PP
Use: 
.PP
.nf

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
f1() f2() 
.RE
.PP

.PP
Definition at line 18 of file process.c.
.SS "int setLevel (int level)"
.PP
Sets the calling process level. \fBParameters:\fP
.RS 4
\fIlevel\fP FOREGROUND or BACKGROUND.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE on success, FALSE on error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetLevel()\fP 
.RE
.PP

.PP
Definition at line 75 of file process.c.
.SS "int setPriority (\fBpid_t\fP pid, int prio)"
.PP
Sets the pid process priority. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process whose priority will be changed. 
.br
\fIprio\fP The priority to be set.
.RE
.PP
\fBReturns:\fP
.RS 4
prio on success, -1 on error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetPriority()\fP 
.RE
.PP

.PP
Definition at line 87 of file process.c.
.SS "int setProcessAtomicity (\fBpid_t\fP pid, int atomic)"
.PP
Sets the given pid process' atomicity. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process whose atomicity will be set. 
.br
\fIatomic\fP ATOMIC or UNATOMIC.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 99 of file process.c.
.SS "\fBtty_t\fP setTty (\fBpid_t\fP pid, \fBtty_t\fP tty)"
.PP
Sets the given process tty id. \fBParameters:\fP
.RS 4
\fIpid\fP The process' pid whose tty id will be set. 
.br
\fItty\fP The tty id to be set.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error.
.RE
.PP
Use: 
.PP
.nf

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
f1() f2() 
.RE
.PP

.PP
Definition at line 31 of file process.c.
.SS "\fBtty_t\fP setTTYFocusedProcess (\fBpid_t\fP pid, \fBtty_t\fP tty)"
.PP
Sets the given tty focused process with the given pid process. \fBParameters:\fP
.RS 4
\fIpid\fP The process to be set as focused process. 
.br
\fItty\fP The tty whose focused process will be set.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetTTYFocusedProcess()\fP 
.RE
.PP

.PP
Definition at line 39 of file process.c.
.SS "int setTTYMode (\fBpid_t\fP pid, int mode)"
.PP
Sets the tty mode of the given pid process. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the process whose tty mode will be changed. 
.br
\fImode\fP The tty mode: TTY_CANONICAL or TTY_RAW.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBgetTTYMode()\fP 
.RE
.PP

.PP
Definition at line 67 of file process.c.
.SS "unsigned time (void)"
.PP
Retrieves the amount of miliseconds that the calling process' had the processor. \fBReturns:\fP
.RS 4
The amount of miliseconds that the calling process' had the processor. 
.RE
.PP

.PP
Definition at line 91 of file process.c.
.SS "unsigned upTime ()"
.PP
Retrieves the amount of ticks since the system boot. \fBReturns:\fP
.RS 4
The amount of ticks since the system boot. 
.RE
.PP

.PP
Definition at line 95 of file process.c.
.SS "int wait (int * status)"
.PP
Blocks the calling process until a child returns. \fBParameters:\fP
.RS 4
\fIstatus\fP A pointer where to store the return state of the child process.
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the pid of the child process that recently returned.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBwaitpid()\fP 
.RE
.PP

.PP
Definition at line 55 of file process.c.
.SS "int waitpid (\fBpid_t\fP pid, int * status)"
.PP
This function blocks the calling process until the given pid child returns. \fBParameters:\fP
.RS 4
\fIpid\fP The pid of the child process to wait. 
.br
\fIstatus\fP A pointer where to store the child process return status.
.RE
.PP
\fBReturns:\fP
.RS 4
The pid of the child process.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBwait()\fP 
.RE
.PP

.PP
Definition at line 59 of file process.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
