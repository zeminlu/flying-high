.TH "src/string.c" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/string.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'string.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBintToString\fP (int num, char *str)"
.br
.RI "\fITransforms the given int number to a string. \fP"
.ti -1c
.RI "char * \fBdoubleToString\fP (double num, char *str)"
.br
.RI "\fIIdem as intToString, but with double values. \fP"
.ti -1c
.RI "int \fBstringHasChar\fP (const char *string, const char c)"
.br
.RI "\fIChecks wether the given string contains or not the given character. \fP"
.ti -1c
.RI "char * \fBstrcat\fP (char *dst, const char *src)"
.br
.RI "\fIConcatenates the src string to the end of the dst string. \fP"
.ti -1c
.RI "int \fBstrlen\fP (const char *str)"
.br
.RI "\fIReturns the length of the string. \fP"
.ti -1c
.RI "int \fBstrcmp\fP (const char *s1, const char *s2)"
.br
.RI "\fIThe \fBstrcmp()\fP function compares the two strings s1 and s2. \fP"
.ti -1c
.RI "int \fBstrncmp\fP (const char *s1, const char *s2, \fBsize_t\fP n)"
.br
.RI "\fIThe \fBstrcmp()\fP function compares the two strings s1 and s2 up to the nth character. \fP"
.ti -1c
.RI "char * \fBstrncpy\fP (char *dst, const char *source, int n)"
.br
.RI "\fICopies the first n bytes from the source string to the dst string. \fP"
.ti -1c
.RI "char * \fBstrcpy\fP (char *dst, const char *source)"
.br
.RI "\fICopies the source Null terminated string to the dst string. \fP"
.ti -1c
.RI "int \fBmemcmp\fP (const void *str1, const void *str2, \fBsize_t\fP count)"
.br
.ti -1c
.RI "void * \fBmemset\fP (void *dest, int val, \fBsize_t\fP len)"
.br
.RI "\fIThe \fBmemset()\fP function sets n bytes from the memory area dest with the value of c. \fP"
.ti -1c
.RI "void * \fBmemcpy\fP (void *dest, const void *source, \fBsize_t\fP n)"
.br
.RI "\fIThe \fBmemcpy()\fP function copies n bytes from memory area src to memory area dest. The memory areas should not overlap. \fP"
.ti -1c
.RI "char * \fBstrtok\fP (char *s, char *tokens)"
.br
.RI "\fIGets segments of the given string delimitated by the given tokens. \fP"
.ti -1c
.RI "int \fBtoInt\fP (char *string)"
.br
.RI "\fITransforms the given string to an int. \fP"
.ti -1c
.RI "char * \fBtoLowerCase\fP (char *string)"
.br
.RI "\fIPasses every UpperCase character from string to LowerCase. \fP"
.ti -1c
.RI "int \fBisAllNumb\fP (char *value)"
.br
.RI "\fIChecks wether the given string contains only numbers. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "char* doubleToString (double num, char * str)"
.PP
Idem as intToString, but with double values. \fBParameters:\fP
.RS 4
\fInum\fP The double number to be transformed. 
.br
\fIstr\fP A pointer where to store the string.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the transformed string on success, NULL on error.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBintToString()\fP 
.RE
.PP

.PP
Definition at line 37 of file string.c.
.SS "char* intToString (int num, char * str)"
.PP
Transforms the given int number to a string. \fBParameters:\fP
.RS 4
\fInum\fP The number to be transformed. 
.br
\fIstr\fP A pointer where to write the string.
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer to the transformed string on success, NULL on error. 
.RE
.PP

.PP
Definition at line 22 of file string.c.
.SS "int isAllNumb (char * value)"
.PP
Checks wether the given string contains only numbers. \fBParameters:\fP
.RS 4
\fIvalue\fP The string to be parsed.
.RE
.PP
\fBReturns:\fP
.RS 4
True if it's all numbers, False if not. 
.RE
.PP

.PP
Definition at line 217 of file string.c.
.SS "int memcmp (const void * str1, const void * str2, \fBsize_t\fP count)"
.PP
Definition at line 123 of file string.c.
.SS "void* memcpy (void * dest, const void * source, \fBsize_t\fP n)"
.PP
The \fBmemcpy()\fP function copies n bytes from memory area src to memory area dest. The memory areas should not overlap. \fBParameters:\fP
.RS 4
\fIdest\fP the destination memory address 
.br
\fIsource\fP the source memory address 
.br
\fIn\fP the amount of bytes to be copied
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the copied memory. 
.RE
.PP

.PP
Definition at line 141 of file string.c.
.SS "void* memset (void * dest, int val, \fBsize_t\fP len)"
.PP
The \fBmemset()\fP function sets n bytes from the memory area dest with the value of c. \fBParameters:\fP
.RS 4
\fIdest\fP Where the memory will be setted. 
.br
\fIval\fP The value with which the memory will be setted. 
.br
\fIlen\fP The ammount of bytes to be setted.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the setted memory. 
.RE
.PP

.PP
Definition at line 134 of file string.c.
.SS "char* strcat (char * dst, const char * src)"
.PP
Concatenates the src string to the end of the dst string. \fBParameters:\fP
.RS 4
\fIdst\fP The destination string. 
.br
\fIsrc\fP The source string.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the concatenated string. 
.RE
.PP

.PP
Definition at line 67 of file string.c.
.SS "int strcmp (const char * s1, const char * s2)"
.PP
The \fBstrcmp()\fP function compares the two strings s1 and s2. \fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared. 
.br
\fIs2\fP The second string to be compared.
.RE
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2. 
.RE
.PP

.PP
Definition at line 82 of file string.c.
.SS "char* strcpy (char * dst, const char * source)"
.PP
Copies the source Null terminated string to the dst string. \fBParameters:\fP
.RS 4
\fIdst\fP Where to copy the string. 
.br
\fIsource\fP The Null terminated string to be copied.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the copied string. 
.RE
.PP

.PP
Definition at line 114 of file string.c.
.SS "int stringHasChar (const char * string, const char c)"
.PP
Checks wether the given string contains or not the given character. \fBParameters:\fP
.RS 4
\fIstring\fP The string to be checked. 
.br
\fIc\fP The character to be checked.
.RE
.PP
\fBReturns:\fP
.RS 4
True if found, False if not. 
.RE
.PP

.PP
Definition at line 59 of file string.c.
.SS "int strlen (const char * str)"
.PP
Returns the length of the string. \fBParameters:\fP
.RS 4
\fIstr\fP The string whose length will be calculated.
.RE
.PP
\fBReturns:\fP
.RS 4
The length of the given string. 
.RE
.PP

.PP
Definition at line 76 of file string.c.
.SS "int strncmp (const char * s1, const char * s2, \fBsize_t\fP n)"
.PP
The \fBstrcmp()\fP function compares the two strings s1 and s2 up to the nth character. \fBParameters:\fP
.RS 4
\fIs1\fP The first string to be compared. 
.br
\fIs2\fP The second string to be compared. 
.br
\fIn\fP The amount of bytes to be taken into acount form each string.
.RE
.PP
\fBReturns:\fP
.RS 4
It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2. 
.RE
.PP

.PP
Definition at line 95 of file string.c.
.SS "char* strncpy (char * dst, const char * source, int n)"
.PP
Copies the first n bytes from the source string to the dst string. \fBParameters:\fP
.RS 4
\fIdst\fP The destination string. 
.br
\fIsource\fP The source string. 
.br
\fIn\fP The ammount of bytes to be copied.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the copied string. 
.RE
.PP

.PP
Definition at line 105 of file string.c.
.SS "char* strtok (char * s, char * tokens)"
.PP
Gets segments of the given string delimitated by the given tokens. \fBParameters:\fP
.RS 4
\fIs\fP The string to be segmentated. 
.br
\fItokens\fP The tokens that limitate the segments.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the current segment. 
.RE
.PP

.PP
Definition at line 154 of file string.c.
.SS "int toInt (char * string)"
.PP
Transforms the given string to an int. \fBParameters:\fP
.RS 4
\fIstring\fP The string to be parsed.
.RE
.PP
\fBReturns:\fP
.RS 4
The int value of the string on success, -1 on error. 
.RE
.PP

.PP
Definition at line 194 of file string.c.
.SS "char* toLowerCase (char * string)"
.PP
Passes every UpperCase character from string to LowerCase. \fBParameters:\fP
.RS 4
\fIstring\fP The string to be lowercased.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the lowercased string on success, NULL on error. 
.RE
.PP

.PP
Definition at line 204 of file string.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
