<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="k_malloc_8c" kind="file">
    <compoundname>kMalloc.c</compoundname>
    <includes local="yes">../inc/kMalloc.h</includes>
    <incdepgraph>
      <node id="4211">
        <label>../inc/kMalloc.h</label>
      </node>
      <node id="4210">
        <label>src/kMalloc.c</label>
        <link refid="kMalloc.c"/>
        <childnode refid="4211" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="k_malloc_8c_1aa6ddfc2b6fa7dd2f05f6226e7d41d3a2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int asigment</definition>
        <argsstring></argsstring>
        <name>asigment</name>
        <initializer> FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="14" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="k_malloc_8c_1a94fffa2a45b02d57b599da53a1201939" prot="public" static="yes" mutable="no">
        <type><ref refid="structmem_area__t" kindref="compound">memArea_t</ref></type>
        <definition>memArea_t auxMem</definition>
        <argsstring></argsstring>
        <name>auxMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="15" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="k_malloc_8c_1a0bfd5ca1cc9403505e76a7cdf8b9cad0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmem_area__t" kindref="compound">memArea_t</ref> *</type>
        <definition>static memArea_t* getMem</definition>
        <argsstring>()</argsstring>
        <name>getMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="17" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="k_malloc_8c_1ab10ef73295572f6facd6e0c9c84e1357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kFree</definition>
        <argsstring>(void *ap)</argsstring>
        <name>kFree</name>
        <param>
          <type>void *</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>This function calls sysFree, that leaves the kernel memory to be used by Kalloc in future calls. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel memory position that will be freed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="k_malloc_8h_1a3de95e75626bd0510063663e71adf2d8" kindref="member">kMalloc()</ref> <ref refid="k_malloc_8h_1a589b6e9dec4c19a34887827761869dd6" kindref="member">kRealloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="28" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="28" bodyend="31"/>
        <references refid="sys_malloc_8h_1afc18fe654253c72492875d6b15506744" compoundref="sys_malloc_8c" startline="31" endline="33">sysFree</references>
      </memberdef>
      <memberdef kind="function" id="k_malloc_8c_1a56f36ea42ec22a22158c4fb5f841e82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* kMalloc</definition>
        <argsstring>(size_t nbytes)</argsstring>
        <name>kMalloc</name>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>This funtion calls sysMalloc that gives the request size of memory. This is given from the kernel memory. On error returns null. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory size that would be returned, this is allways kernel memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the logic memory position, with continious memory to use.</para></simplesect>
<simplesect kind="see"><para><ref refid="k_malloc_8h_1ab10ef73295572f6facd6e0c9c84e1357" kindref="member">kFree()</ref> <ref refid="k_malloc_8h_1a589b6e9dec4c19a34887827761869dd6" kindref="member">kRealloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="32" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="32" bodyend="34"/>
        <references refid="sys_malloc_8h_1a7472d23b0529e946d8dcdf5a0de26c52" compoundref="sys_malloc_8c" startline="48" endline="57">sysMalloc</references>
      </memberdef>
      <memberdef kind="function" id="k_malloc_8c_1ad9fb012fb56b43ef1ab6078646973b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* kRealloc</definition>
        <argsstring>(void *ap, size_t size)</argsstring>
        <name>kRealloc</name>
        <param>
          <type>void *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Calls sysRealloc, that changes the size of the original. It returns null if there is not enough memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The logic memory position that wold be extended. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size that would be used to increase the ap segment memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new memory address that has a continuous segment of kernel memory.</para></simplesect>
<simplesect kind="see"><para><ref refid="k_malloc_8h_1ab10ef73295572f6facd6e0c9c84e1357" kindref="member">kFree()</ref> <ref refid="k_malloc_8h_1a3de95e75626bd0510063663e71adf2d8" kindref="member">kMalloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" line="35" bodyfile="/Users/Luciano/Desktop/flying-high/src/kMalloc.c" bodystart="35" bodyend="37"/>
        <references refid="sys_malloc_8h_1adac4283ee6b45334ca1ea574599d7532" compoundref="sys_malloc_8c" startline="35" endline="46">sysRealloc</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The kernel malloc module. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Luciano Zemin, Nicolás Magni, Nicolás Purita </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;../inc/kMalloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*Falta<sp/>agregar<sp/>el<sp/>true<sp/>y<sp/>el<sp/>false*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asigment<sp/>=<sp/><ref refid="defs_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="DefineBrief.">FALSE</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmem_area__t" kindref="compound" tooltip="The mem area malloc struct.">memArea_t</ref><sp/>auxMem;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmem_area__t" kindref="compound" tooltip="The mem area malloc struct.">memArea_t</ref><sp/>*<sp/>getMem(){<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!asigment){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asigment<sp/>=<sp/><ref refid="defs_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="DefineBrief.">TRUE</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxMem.allocp<sp/>=<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxMem.address<sp/>=<sp/><ref refid="process_8h_1ad739f1d72d85aae30ff758c2d91c8c15" kindref="member" tooltip="Brief.">memmap</ref>(<ref refid="defs_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="DefineBrief.">TRUE</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxMem.size<sp/>=<sp/>(<ref refid="config_8h_1a072812a1bebf92b7d4e6c4321573b9a1" kindref="member" tooltip="The amount of pages per frame.">PAGES_PER_FRAME</ref><sp/>*<sp/><ref refid="defs_8h_1a7d467c1d283fdfa1f2081ba1e0d01b6e" kindref="member" tooltip="DefineBrief.">PAGE_SIZE</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;auxMem;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="k_malloc_8c_1ab10ef73295572f6facd6e0c9c84e1357" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="k_malloc_8h_1ab10ef73295572f6facd6e0c9c84e1357" kindref="member" tooltip="This function calls sysFree, that leaves the kernel memory to be used by Kalloc in...">kFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ap){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_malloc_8h_1afc18fe654253c72492875d6b15506744" kindref="member" tooltip="Leaves avaiable the segment to be used in futures calls to sysMalloc. The memory...">sysFree</ref>(ap,getMem);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32" refid="k_malloc_8c_1a56f36ea42ec22a22158c4fb5f841e82e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="k_malloc_8h_1a3de95e75626bd0510063663e71adf2d8" kindref="member" tooltip="This funtion calls sysMalloc that gives the request size of memory. This is given...">kMalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys_malloc_8h_1a7472d23b0529e946d8dcdf5a0de26c52" kindref="member" tooltip="Function that gives a continuous segment of memory. This memory comes from the function...">sysMalloc</ref>(nbytes,getMem);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35" refid="k_malloc_8c_1ad9fb012fb56b43ef1ab6078646973b3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="k_malloc_8h_1a589b6e9dec4c19a34887827761869dd6" kindref="member" tooltip="Calls sysRealloc, that changes the size of the original. It returns null if there...">kRealloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ap,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys_malloc_8h_1adac4283ee6b45334ca1ea574599d7532" kindref="member" tooltip="This function changes the original size of the logical memory to a new one if it&amp;#39;s...">sysRealloc</ref>(ap,<sp/>size,getMem);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Luciano/Desktop/flying-high/src/kMalloc.c"/>
  </compounddef>
</doxygen>
