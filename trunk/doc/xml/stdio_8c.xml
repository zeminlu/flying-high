<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="stdio_8c" kind="file">
    <compoundname>stdio.c</compoundname>
    <includes refid="stdio_8h" local="yes">stdio.h</includes>
    <incdepgraph>
      <node id="4462">
        <label>colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="4463">
        <label>unistd.h</label>
        <link refid="unistd_8h"/>
        <childnode refid="4459" relation="include">
        </childnode>
      </node>
      <node id="4457">
        <label>stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4463" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
      </node>
      <node id="4459">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4461" relation="include">
        </childnode>
      </node>
      <node id="4456">
        <label>src/stdio.c</label>
        <link refid="stdio.c"/>
        <childnode refid="4457" relation="include">
        </childnode>
      </node>
      <node id="4461">
        <label>config.h</label>
        <link refid="config_8h"/>
        <childnode refid="4462" relation="include">
        </childnode>
      </node>
      <node id="4458">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="4459" relation="include">
        </childnode>
      </node>
      <node id="4460">
        <label>defs.h</label>
        <link refid="defs_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" prot="public" static="no">
        <name>NIBBLES_PER_INT</name>
        <initializer>sizeof(int) * 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="14" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="14" bodyend="-1"/>
        <referencedby refid="stdio_8c_1ab478c2e59f39890f213687f1ebd59285" compoundref="stdio_8c" startline="25" endline="42">fputx</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stdio_8c_1a299df7595d833020c4d9622877eba4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fputi</definition>
        <argsstring>(int i, FILE *stream)</argsstring>
        <name>fputi</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Writes the given integer to the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to write to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="16" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="16" bodyend="23"/>
        <references refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" compoundref="stdio_8c" startline="66" endline="75">fputs</references>
        <references refid="string_8h_1a5047528a41494675d15fee6c643f8e7a" compoundref="string_8c" startline="22" endline="35">intToString</references>
        <references refid="string_8h_1a1dfdc55c5334154353963674598faf1b" compoundref="string_8c" startline="134" endline="139">memset</references>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1ab478c2e59f39890f213687f1ebd59285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fputx</definition>
        <argsstring>(int num, FILE *stream)</argsstring>
        <name>fputx</name>
        <param>
          <type>int</type>
          <declname>i</declname>
          <defname>num</defname>
        </param>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Writes the given integer as in hexadecimal format into the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to bw written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to write the number to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="25" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="25" bodyend="42"/>
        <references refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" compoundref="stdio_8c" startline="66" endline="75">fputs</references>
        <references refid="string_8h_1a1dfdc55c5334154353963674598faf1b" compoundref="string_8c" startline="134" endline="139">memset</references>
        <references refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" compoundref="stdio_8c" startline="14">NIBBLES_PER_INT</references>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1abe6299d5823dd023e610aaa619735a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fputc</definition>
        <argsstring>(int c, FILE *stream)</argsstring>
        <name>fputc</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Writes the given character to the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character ascii to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to write the character to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="stdio_8h_1ab11a990e4f8863a1e7736e3c1d430092" kindref="member">fgetc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="45" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="44" bodyend="51"/>
        <references refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" compoundref="stdio_8h" startline="19">EOF</references>
        <references refid="unistd_8h_1a681fc6e35e986fe5975afb7a110830a2">fwrite</references>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <referencedby refid="bttlship_8c_1a21c4f719d9c70f144ffbb7b4ab57d935" compoundref="bttlship_8c" startline="400" endline="439">showBattle</referencedby>
        <referencedby refid="bttlship_8c_1afcb21d332942ec61fd523fed20b758e5" compoundref="bttlship_8c" startline="389" endline="398">showRow</referencedby>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1ab11a990e4f8863a1e7736e3c1d430092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fgetc</definition>
        <argsstring>(FILE *stream)</argsstring>
        <name>fgetc</name>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Reads a character ascii from the given stream and returns it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to read the character from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ascii from the read character.</para></simplesect>
<simplesect kind="see"><para><ref refid="stdio_8h_1abe6299d5823dd023e610aaa619735a3f" kindref="member">fputc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="54" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="53" bodyend="64"/>
        <references refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" compoundref="stdio_8h" startline="19">EOF</references>
        <references refid="unistd_8h_1a5c221b4b7f606967759233ad35c1b924">fread</references>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1a68236e664c1f0da049b25fba1c1695f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fputs</definition>
        <argsstring>(const char *s, FILE *stream)</argsstring>
        <name>fputs</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Writes the given string to the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A null terminate string to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to write the string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="stdio_8h_1a5e7ab996618ebc6b2fab4e0fa35f5a3f" kindref="member">fgets()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="67" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="66" bodyend="75"/>
        <references refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" compoundref="stdio_8h" startline="19">EOF</references>
        <references refid="unistd_8h_1a681fc6e35e986fe5975afb7a110830a2">fwrite</references>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <references refid="string_8h_1ae6c8de953239811a34eeeab09458e55e" compoundref="string_8c" startline="76" endline="80">strlen</references>
        <referencedby refid="stdio_8c_1a299df7595d833020c4d9622877eba4f0" compoundref="stdio_8c" startline="16" endline="23">fputi</referencedby>
        <referencedby refid="stdio_8c_1ab478c2e59f39890f213687f1ebd59285" compoundref="stdio_8c" startline="25" endline="42">fputx</referencedby>
        <referencedby refid="bttlship_8c_1afcb21d332942ec61fd523fed20b758e5" compoundref="bttlship_8c" startline="389" endline="398">showRow</referencedby>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1a2b3df0e66b41edab3c039191fe6cc4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* fgets</definition>
        <argsstring>(char *s, int size, FILE *stream)</argsstring>
        <name>fgets</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Reads a string of the given size from the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer where to write the string to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The ammount of bytes to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to read the string from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" kindref="member">fputs()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="78" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="77" bodyend="84"/>
        <references refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" compoundref="stdio_8h" startline="19">EOF</references>
        <references refid="unistd_8h_1a5c221b4b7f606967759233ad35c1b924">fread</references>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
      </memberdef>
      <memberdef kind="function" id="stdio_8c_1af7aa5c359f41db5ffe4a6545628c02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flush</definition>
        <argsstring>(FILE *stream)</argsstring>
        <name>flush</name>
        <param>
          <type><ref refid="struct_f_i_l_e" kindref="compound">FILE</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Flushes the given stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to be flushed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c" line="87" bodyfile="/Users/Luciano/Desktop/flying-high/src/stdio.c" bodystart="86" bodyend="91"/>
        <references refid="struct_f_i_l_e_1aff2566f4c366b48d73479bef43ee4d2e" compoundref="types_8h" startline="124">FILE::buffer</references>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <references refid="struct_f_i_l_e_1a935adc2e417a61d7eb6f04efb18ba031" compoundref="types_8h" startline="125">FILE::ptr</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definitions for all standard input and output and declaration of all functions to send/recive data to/from standar input/output. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Luciano Zemin, Nicolás Magni, Nicolás Purita </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdio_8h" kindref="compound" tooltip="Definitions for all standard input and output and declaration of all functions to...">stdio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NIBBLES_PER_INT<sp/>sizeof(int)<sp/>*<sp/>2</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="stdio_8c_1a299df7595d833020c4d9622877eba4f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a299df7595d833020c4d9622877eba4f0" kindref="member" tooltip="Writes the given integer to the given stream.">fputi</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[10];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a1dfdc55c5334154353963674598faf1b" kindref="member" tooltip="The memset() function sets n bytes from the memory area dest with the value of c...">memset</ref>(msg,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a5047528a41494675d15fee6c643f8e7a" kindref="member" tooltip="Transforms the given int number to a string.">intToString</ref>(i,<sp/>msg);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" kindref="member" tooltip="Writes the given string to the given stream.">fputs</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)msg,<sp/>stream);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="stdio_8c_1ab478c2e59f39890f213687f1ebd59285" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1aa5cfafef91301ee67b232c02b0b286a9" kindref="member" tooltip="Writes the given integer as in hexadecimal format into the given stream.">fputx</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[<ref refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" kindref="member">NIBBLES_PER_INT</ref><sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nibbles,<sp/>mask,<sp/>c;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="string_8h_1a1dfdc55c5334154353963674598faf1b" kindref="member" tooltip="The memset() function sets n bytes from the memory area dest with the value of c...">memset</ref>(msg,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/><ref refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" kindref="member">NIBBLES_PER_INT</ref><sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>0x0000000F;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0,<sp/>nibbles<sp/>=<sp/><ref refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" kindref="member">NIBBLES_PER_INT</ref>;<sp/>i<sp/>&lt;<sp/>nibbles;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>num<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>&lt;<sp/>0xA<sp/>)<sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[<ref refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" kindref="member">NIBBLES_PER_INT</ref><sp/>-<sp/>i<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg[<ref refid="stdio_8c_1af6e16037bdac816060ed72c11b100cfb" kindref="member">NIBBLES_PER_INT</ref><sp/>-<sp/>i<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>c<sp/>-<sp/>10;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" kindref="member" tooltip="Writes the given string to the given stream.">fputs</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)msg,<sp/>stream);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="stdio_8c_1abe6299d5823dd023e610aaa619735a3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1abe6299d5823dd023e610aaa619735a3f" kindref="member" tooltip="Writes the given character to the given stream.">fputc</ref><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream<sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stream<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/><sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="unistd_8h_1a681fc6e35e986fe5975afb7a110830a2" kindref="member" tooltip="Idem to the write() function, but to the given stream.">fwrite</ref>(stream,<sp/>&amp;c,<sp/>1)<sp/>!=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="stdio_8c_1ab11a990e4f8863a1e7736e3c1d430092" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1ab11a990e4f8863a1e7736e3c1d430092" kindref="member" tooltip="Reads a character ascii from the given stream and returns it.">fgetc</ref><sp/>(<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stream<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="unistd_8h_1a5c221b4b7f606967759233ad35c1b924" kindref="member" tooltip="Idem to the read() function, but from the given stream.">fread</ref>(stream,<sp/>&amp;c,<sp/>1)<sp/>!=<sp/>1<sp/>){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="stdio_8c_1a68236e664c1f0da049b25fba1c1695f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a68236e664c1f0da049b25fba1c1695f6" kindref="member" tooltip="Writes the given string to the given stream.">fputs</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>||<sp/>stream<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(ret<sp/>=<sp/><ref refid="unistd_8h_1a681fc6e35e986fe5975afb7a110830a2" kindref="member" tooltip="Idem to the write() function, but to the given stream.">fwrite</ref>(stream,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)s,<sp/><ref refid="string_8h_1ae6c8de953239811a34eeeab09458e55e" kindref="member" tooltip="Returns the length of the string.">strlen</ref>(s)))<sp/>==<sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref><sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="stdio_8c_1a2b3df0e66b41edab3c039191fe6cc4f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="stdio_8h_1a5e7ab996618ebc6b2fab4e0fa35f5a3f" kindref="member" tooltip="Reads a string of the given size from the given stream.">fgets</ref><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stream<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>||<sp/>s<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>||<sp/>size<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="unistd_8h_1a5c221b4b7f606967759233ad35c1b924" kindref="member" tooltip="Idem to the read() function, but from the given stream.">fread</ref>(stream,<sp/>s,<sp/>size)<sp/>==<sp/><ref refid="stdio_8h_1a59adc4c82490d23754cd39c2fb99b0da" kindref="member">EOF</ref><sp/>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="stdio_8c_1af7aa5c359f41db5ffe4a6545628c02d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stdio_8h_1af7aa5c359f41db5ffe4a6545628c02d1" kindref="member" tooltip="Flushes the given stream.">flush</ref><sp/>(<sp/><ref refid="struct_f_i_l_e" kindref="compound" tooltip="The FILE struct.">FILE</ref><sp/>*<sp/>stream<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stream<sp/>==<sp/><ref refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="NULL pointer definition.">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream-&gt;<ref refid="struct_f_i_l_e_1a935adc2e417a61d7eb6f04efb18ba031" kindref="member">ptr</ref><sp/>=<sp/>stream-&gt;<ref refid="struct_f_i_l_e_1aff2566f4c366b48d73479bef43ee4d2e" kindref="member">buffer</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Luciano/Desktop/flying-high/src/stdio.c"/>
  </compounddef>
</doxygen>
