<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="string_8h" kind="file">
    <compoundname>string.h</compoundname>
    <includes refid="types_8h" local="yes">types.h</includes>
    <includedby refid="bin_8h" local="yes">inc/bin.h</includedby>
    <includedby refid="bttlship_8h" local="yes">inc/bttlship.h</includedby>
    <includedby refid="kernel_8h" local="yes">inc/kernel.h</includedby>
    <includedby refid="mem_module_8h" local="yes">inc/memModule.h</includedby>
    <includedby refid="p_queue_p_8h" local="yes">inc/pQueueP.h</includedby>
    <includedby refid="process_8h" local="yes">inc/process.h</includedby>
    <includedby refid="shell_8h" local="yes">inc/shell.h</includedby>
    <includedby refid="stdio_8h" local="yes">inc/stdio.h</includedby>
    <includedby refid="syscall_8h" local="yes">inc/syscall.h</includedby>
    <includedby refid="sys_malloc_8h" local="yes">inc/sysMalloc.h</includedby>
    <includedby refid="ttys_8h" local="yes">inc/ttys.h</includedby>
    <includedby refid="p_queue_p_8c" local="yes">src/pQueueP.c</includedby>
    <includedby refid="string_8c" local="yes">src/string.c</includedby>
    <incdepgraph>
      <node id="3528">
        <label>colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="3525">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="3526" relation="include">
        </childnode>
        <childnode refid="3527" relation="include">
        </childnode>
      </node>
      <node id="3527">
        <label>config.h</label>
        <link refid="config_8h"/>
        <childnode refid="3528" relation="include">
        </childnode>
      </node>
      <node id="3524">
        <label>inc/string.h</label>
        <link refid="string.h"/>
        <childnode refid="3525" relation="include">
        </childnode>
      </node>
      <node id="3526">
        <label>defs.h</label>
        <link refid="defs_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3545">
        <label>inc/rand.h</label>
        <link refid="rand_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3546" relation="include">
        </childnode>
      </node>
      <node id="3531">
        <label>inc/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3532" relation="include">
        </childnode>
      </node>
      <node id="3561">
        <label>src/shell.c</label>
        <link refid="shell_8c"/>
      </node>
      <node id="3541">
        <label>inc/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="3541" relation="include">
        </childnode>
      </node>
      <node id="3538">
        <label>src/bttlship.c</label>
        <link refid="bttlship_8c"/>
      </node>
      <node id="3550">
        <label>inc/shMemory.h</label>
        <link refid="sh_memory_8h"/>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3551" relation="include">
        </childnode>
      </node>
      <node id="3544">
        <label>inc/syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3545" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3547" relation="include">
        </childnode>
      </node>
      <node id="3554">
        <label>inc/schedule.h</label>
        <link refid="schedule_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3555" relation="include">
        </childnode>
      </node>
      <node id="3555">
        <label>src/schedule.c</label>
        <link refid="schedule_8c"/>
      </node>
      <node id="3567">
        <label>inc/stdio.h</label>
        <link refid="stdio_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3541" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3563" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
        <childnode refid="3568" relation="include">
        </childnode>
      </node>
      <node id="3569">
        <label>src/string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="3562">
        <label>src/bin.c</label>
        <link refid="bin_8c"/>
      </node>
      <node id="3560">
        <label>src/system.c</label>
        <link refid="system_8c"/>
      </node>
      <node id="3539">
        <label>inc/kMalloc.h</label>
        <link refid="k_malloc_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3540" relation="include">
        </childnode>
      </node>
      <node id="3533">
        <label>inc/shell.h</label>
        <link refid="shell_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3559" relation="include">
        </childnode>
        <childnode refid="3561" relation="include">
        </childnode>
      </node>
      <node id="3557">
        <label>src/pQueueP.c</label>
        <link refid="p_queue_p_8c"/>
        <childnode refid="3557" relation="include">
        </childnode>
      </node>
      <node id="3559">
        <label>inc/system.h</label>
        <link refid="system_8h"/>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3560" relation="include">
        </childnode>
      </node>
      <node id="3534">
        <label>inc/sysProcess.h</label>
        <link refid="sys_process_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
        <childnode refid="3558" relation="include">
        </childnode>
      </node>
      <node id="3564">
        <label>inc/kernelDepth.h</label>
        <link refid="kernel_depth_8h"/>
        <childnode refid="3544" relation="include">
        </childnode>
      </node>
      <node id="3568">
        <label>src/stdio.c</label>
        <link refid="stdio_8c"/>
      </node>
      <node id="3551">
        <label>src/shMemory.c</label>
        <link refid="sh_memory_8c"/>
      </node>
      <node id="3542">
        <label>inc/keyboard_driver.h</label>
        <link refid="keyboard__driver_8h"/>
        <childnode refid="3543" relation="include">
        </childnode>
      </node>
      <node id="3565">
        <label>inc/sysMalloc.h</label>
        <link refid="sys_malloc_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3553" relation="include">
        </childnode>
        <childnode refid="3566" relation="include">
        </childnode>
      </node>
      <node id="3566">
        <label>src/sysMalloc.c</label>
        <link refid="sys_malloc_8c"/>
      </node>
      <node id="3540">
        <label>inc/ttys.h</label>
        <link refid="ttys_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3541" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3542" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3548" relation="include">
        </childnode>
      </node>
      <node id="3537">
        <label>inc/bttlship.h</label>
        <link refid="bttlship_8h"/>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3538" relation="include">
        </childnode>
      </node>
      <node id="3529">
        <label>inc/string.h</label>
        <link refid="string.h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3563" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3567" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3565" relation="include">
        </childnode>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
        <childnode refid="3569" relation="include">
        </childnode>
      </node>
      <node id="3536">
        <label>inc/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3549" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3553" relation="include">
        </childnode>
        <childnode refid="3556" relation="include">
        </childnode>
      </node>
      <node id="3558">
        <label>src/sysProcess.c</label>
        <link refid="sys_process_8c"/>
      </node>
      <node id="3556">
        <label>src/process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="3552">
        <label>src/semaphore.c</label>
        <link refid="semaphore_8c"/>
      </node>
      <node id="3549">
        <label>inc/semaphore.h</label>
        <link refid="semaphore_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3550" relation="include">
        </childnode>
        <childnode refid="3552" relation="include">
        </childnode>
      </node>
      <node id="3547">
        <label>src/syscall.c</label>
        <link refid="syscall_8c"/>
      </node>
      <node id="3532">
        <label>src/kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="3546">
        <label>src/rand.c</label>
        <link refid="rand_8c"/>
      </node>
      <node id="3548">
        <label>src/ttys.c</label>
        <link refid="ttys_8c"/>
      </node>
      <node id="3563">
        <label>inc/memModule.h</label>
        <link refid="mem_module_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3564" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3565" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3553" relation="include">
        </childnode>
      </node>
      <node id="3543">
        <label>src/keyboard_driver.c</label>
        <link refid="keyboard__driver_8c"/>
      </node>
      <node id="3553">
        <label>inc/uMalloc.h</label>
        <link refid="u_malloc_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
      </node>
      <node id="3530">
        <label>inc/bin.h</label>
        <link refid="bin_8h"/>
        <childnode refid="3530" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3562" relation="include">
        </childnode>
      </node>
      <node id="3535">
        <label>inc/pQueueP.h</label>
        <link refid="p_queue_p_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="string_8h_1aaed18db97b5e36c8db44ed61803bb0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strncpy</definition>
        <argsstring>(char *dst, const char *source, int n)</argsstring>
        <name>strncpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copies the first n bytes from the source string to the dst string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The ammount of bytes to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copied string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="27" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a839ba133fed8b10bbded09e332999153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stringHasChar</definition>
        <argsstring>(const char *string, const char c)</argsstring>
        <name>stringHasChar</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks wether the given string contains or not the given character. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be checked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to be checked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if found, False if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="40" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="59" bodyend="65"/>
        <references refid="defs_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="defs_8h" startline="37">FALSE</references>
        <references refid="string_8h_1ae6c8de953239811a34eeeab09458e55e" compoundref="string_8c" startline="76" endline="80">strlen</references>
        <references refid="defs_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="defs_8h" startline="32">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a9517a4a50477f651785c09b27826d8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strcat</definition>
        <argsstring>(char *dst, const char *src)</argsstring>
        <name>strcat</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Concatenates the src string to the end of the dst string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the concatenated string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="53" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1ae6c8de953239811a34eeeab09458e55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strlen</definition>
        <argsstring>(const char *str)</argsstring>
        <name>strlen</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the length of the string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string whose length will be calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of the given string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="65" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="76" bodyend="80"/>
        <referencedby refid="syscall_8c_1a5cd71748fd2bf784c6e4f481809a9b15" compoundref="syscall_8c" startline="160" endline="242">_sys_create_process</referencedby>
        <referencedby refid="stdio_8c_1a68236e664c1f0da049b25fba1c1695f6" compoundref="stdio_8c" startline="66" endline="75">fputs</referencedby>
        <referencedby refid="string_8c_1a839ba133fed8b10bbded09e332999153" compoundref="string_8c" startline="59" endline="65">stringHasChar</referencedby>
        <referencedby refid="string_8c_1a5cd51814499c616414a5b60a0e33ea57" compoundref="string_8c" startline="154" endline="192">strtok</referencedby>
        <referencedby refid="bin_8c_1a9795fbee9531f56aeda1376bf9934506" compoundref="bin_8c" startline="63" endline="215">top</referencedby>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strcmp</definition>
        <argsstring>(const char *s1, const char *s2)</argsstring>
        <name>strcmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>The <ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp()</ref> function compares the two strings s1 and s2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="79" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="82" bodyend="93"/>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
      </memberdef>
      <memberdef kind="function" id="string_8h_1aba088e716bccbc96d42da97e96316df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * memcpy</definition>
        <argsstring>(void *dest, const void *src, size_t n)</argsstring>
        <name>memcpy</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
          <defname>source</defname>
        </param>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The <ref refid="string_8h_1aba088e716bccbc96d42da97e96316df1" kindref="member">memcpy()</ref> function copies n bytes from memory area src to memory area dest. The memory areas should not overlap. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of bytes to be copied</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copied memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="95" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="141" bodyend="152"/>
        <referencedby refid="syscall_8c_1a5cd71748fd2bf784c6e4f481809a9b15" compoundref="syscall_8c" startline="160" endline="242">_sys_create_process</referencedby>
        <referencedby refid="syscall_8c_1a3a8140629b64c39fb34eb595b2d1cce2" compoundref="syscall_8c" startline="51" endline="84">_sys_read</referencedby>
        <referencedby refid="video__driver_8c_1ab59b086c41d506e55aa02729f9916be2" compoundref="video__driver_8c" startline="233" endline="236">refreshScreen</referencedby>
        <referencedby refid="sys_malloc_8c_1a9dd7a27b9a2dd7b9249af7fdef77fb4f" compoundref="sys_malloc_8c" startline="35" endline="46">sysRealloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a1dfdc55c5334154353963674598faf1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * memset</definition>
        <argsstring>(void *dest, int c, size_t n)</argsstring>
        <name>memset</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <defname>val</defname>
        </param>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>n</declname>
          <defname>len</defname>
        </param>
        <briefdescription>
<para>The <ref refid="string_8h_1a1dfdc55c5334154353963674598faf1b" kindref="member">memset()</ref> function sets n bytes from the memory area dest with the value of c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Where the memory will be setted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value with which the memory will be setted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The ammount of bytes to be setted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the setted memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="110" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="134" bodyend="139"/>
        <referencedby refid="syscall_8c_1a5cd71748fd2bf784c6e4f481809a9b15" compoundref="syscall_8c" startline="160" endline="242">_sys_create_process</referencedby>
        <referencedby refid="stdio_8c_1a299df7595d833020c4d9622877eba4f0" compoundref="stdio_8c" startline="16" endline="23">fputi</referencedby>
        <referencedby refid="stdio_8c_1ab478c2e59f39890f213687f1ebd59285" compoundref="stdio_8c" startline="25" endline="42">fputx</referencedby>
        <referencedby refid="bttlship_8c_1ae442293b5a53448d5a03e47e38396009" compoundref="bttlship_8c" startline="357" endline="387">genBattle</referencedby>
        <referencedby refid="mem_module_8c_1a7a9e898c2f9b5aae935f0668c962d02f" compoundref="mem_module_8c" startline="38" endline="65">initPaging</referencedby>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a07f4a84c11c106e95c32b6ab509346ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strncmp</definition>
        <argsstring>(const char *s1, const char *s2, size_t n)</argsstring>
        <name>strncmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The <ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member">strcmp()</ref> function compares the two strings s1 and s2 up to the nth character. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of bytes to be taken into acount form each string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>It returns an integer less than, equal to, or greater than zero if s1 is found, respectively, to be less than, to match, or be greater than s2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="125" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1ad80e936d8fe6ed29ad12bb760536ec1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strcpy</definition>
        <argsstring>(char *dst, const char *source)</argsstring>
        <name>strcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Copies the source Null terminated string to the dst string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to copy the string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The Null terminated string to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copied string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="138" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a623f10afaacb826c45536f4191c18357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * strtok</definition>
        <argsstring>(char *s, char *tokens)</argsstring>
        <name>strtok</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
<para>Gets segments of the given string delimitated by the given tokens. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be segmentated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>The tokens that limitate the segments.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the current segment. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="151" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="154" bodyend="192"/>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <references refid="string_8h_1ae6c8de953239811a34eeeab09458e55e" compoundref="string_8c" startline="76" endline="80">strlen</references>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a499020e544a321bb07fd3cb85102db46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int toInt</definition>
        <argsstring>(char *string)</argsstring>
        <name>toInt</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Transforms the given string to an int. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The int value of the string on success, -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="163" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="194" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a5047528a41494675d15fee6c643f8e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * intToString</definition>
        <argsstring>(int num, char *str)</argsstring>
        <name>intToString</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Transforms the given int number to a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to be transformed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where to write the string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointer to the transformed string on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="176" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="22" bodyend="35"/>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <referencedby refid="stdio_8c_1a299df7595d833020c4d9622877eba4f0" compoundref="stdio_8c" startline="16" endline="23">fputi</referencedby>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a5aad25908949f4a9f515aff74d166cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * doubleToString</definition>
        <argsstring>(double num, char *str)</argsstring>
        <name>doubleToString</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Idem as intToString, but with double values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The double number to be transformed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer where to store the string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the transformed string on success, NULL on error.</para></simplesect>
<simplesect kind="see"><para><ref refid="string_8h_1a5047528a41494675d15fee6c643f8e7a" kindref="member">intToString()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="191" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="37" bodyend="57"/>
        <references refid="defs_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="defs_8h" startline="328">NULL</references>
        <referencedby refid="bin_8c_1a9795fbee9531f56aeda1376bf9934506" compoundref="bin_8c" startline="63" endline="215">top</referencedby>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a54d972ccd875da7d6e9ef4afc2d9f586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * toLowerCase</definition>
        <argsstring>(char *string)</argsstring>
        <name>toLowerCase</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Passes every UpperCase character from string to LowerCase. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be lowercased.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the lowercased string on success, NULL on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="203" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="204" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="string_8h_1a8df8d0c23a868e43a921e790dd8cdd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isAllNumb</definition>
        <argsstring>(char *value)</argsstring>
        <name>isAllNumb</name>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Checks wether the given string contains only numbers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it&apos;s all numbers, False if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/inc/string.h" line="215" bodyfile="/Users/Luciano/Desktop/flying-high/src/string.c" bodystart="217" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Declaration of all functions that deals with strings and buffers. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Luciano Zemin, Nicolás Magni, Nicolás Purita </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#ifndef<sp/>_STRING_H_</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_STRING_H_</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound" tooltip="Definition for system dependent types.">types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1aaed18db97b5e36c8db44ed61803bb0c6" kindref="member" tooltip="Copies the first n bytes from the source string to the dst string.">strncpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1a839ba133fed8b10bbded09e332999153" kindref="member" tooltip="Checks wether the given string contains or not the given character.">stringHasChar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a9517a4a50477f651785c09b27826d8ce" kindref="member" tooltip="Concatenates the src string to the end of the dst string.">strcat</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1ae6c8de953239811a34eeeab09458e55e" kindref="member" tooltip="Returns the length of the string.">strlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1a11bd144d7d44914099a3aeddf1c8567d" kindref="member" tooltip="The strcmp() function compares the two strings s1 and s2.">strcmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1aba088e716bccbc96d42da97e96316df1" kindref="member" tooltip="The memcpy() function copies n bytes from memory area src to memory area dest. The...">memcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a1dfdc55c5334154353963674598faf1b" kindref="member" tooltip="The memset() function sets n bytes from the memory area dest with the value of c...">memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1a07f4a84c11c106e95c32b6ab509346ef" kindref="member" tooltip="The strcmp() function compares the two strings s1 and s2 up to the nth character...">strncmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1ad80e936d8fe6ed29ad12bb760536ec1d" kindref="member" tooltip="Copies the source Null terminated string to the dst string.">strcpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a623f10afaacb826c45536f4191c18357" kindref="member" tooltip="Gets segments of the given string delimitated by the given tokens.">strtok</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>tokens);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1a499020e544a321bb07fd3cb85102db46" kindref="member" tooltip="Transforms the given string to an int.">toInt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a5047528a41494675d15fee6c643f8e7a" kindref="member" tooltip="Transforms the given int number to a string.">intToString</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a5aad25908949f4a9f515aff74d166cbe" kindref="member" tooltip="Idem as intToString, but with double values.">doubleToString</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="string_8h_1a54d972ccd875da7d6e9ef4afc2d9f586" kindref="member" tooltip="Passes every UpperCase character from string to LowerCase.">toLowerCase</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="string_8h_1a8df8d0c23a868e43a921e790dd8cdd7b" kindref="member" tooltip="Checks wether the given string contains only numbers.">isAllNumb</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/Luciano/Desktop/flying-high/inc/string.h"/>
  </compounddef>
</doxygen>
