<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="u_malloc_8c" kind="file">
    <compoundname>uMalloc.c</compoundname>
    <includes local="yes">../inc/uMalloc.h</includes>
    <incdepgraph>
      <node id="4612">
        <label>../inc/uMalloc.h</label>
      </node>
      <node id="4611">
        <label>src/uMalloc.c</label>
        <link refid="uMalloc.c"/>
        <childnode refid="4612" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="u_malloc_8c_1a0bfd5ca1cc9403505e76a7cdf8b9cad0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmem_area__t" kindref="compound">memArea_t</ref> *</type>
        <definition>static memArea_t* getMem</definition>
        <argsstring>()</argsstring>
        <name>getMem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" line="12" bodyfile="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="u_malloc_8c_1adebb229f063e66907017098087cbe791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free</definition>
        <argsstring>(void *ap)</argsstring>
        <name>free</name>
        <param>
          <type>void *</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Frees up the user memory pointed by ap for futures mallocs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the logical memory position that would be freed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="u_malloc_8h_1a31161ef8eddd18e7781cb947f6f627d5" kindref="member">malloc()</ref> <ref refid="u_malloc_8h_1a07b27aa678d6fdc15e47655bcf771a4e" kindref="member">realloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" line="16" bodyfile="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" bodystart="16" bodyend="19"/>
        <references refid="sys_malloc_8h_1afc18fe654253c72492875d6b15506744" compoundref="sys_malloc_8c" startline="31" endline="33">sysFree</references>
        <referencedby refid="p_queue_p_8c_1a871d918e75bffdd2c05ce85a8b8454a9" compoundref="p_queue_p_8c" startline="46" endline="49">freeNode</referencedby>
        <referencedby refid="p_queue_p_8c_1a2c853f35b6e0b2adc7626d27013638d6" compoundref="p_queue_p_8c" startline="98" endline="118">freePQueue</referencedby>
      </memberdef>
      <memberdef kind="function" id="u_malloc_8c_1a46627f45f4a4d33db3de37fce9b5a8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* malloc</definition>
        <argsstring>(size_t nbytes)</argsstring>
        <name>malloc</name>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>returns a continuous segment of user memory. It could return null if there is not enough free space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of continuous memory that would be returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The logical user memory to be used.</para></simplesect>
<simplesect kind="see"><para><ref refid="u_malloc_8h_1adebb229f063e66907017098087cbe791" kindref="member">free()</ref> <ref refid="u_malloc_8h_1a07b27aa678d6fdc15e47655bcf771a4e" kindref="member">realloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" line="20" bodyfile="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" bodystart="20" bodyend="22"/>
        <references refid="sys_malloc_8h_1a7472d23b0529e946d8dcdf5a0de26c52" compoundref="sys_malloc_8c" startline="48" endline="57">sysMalloc</references>
        <referencedby refid="p_queue_p_8c_1ac816b273d6f10ffc9d0fb76bc86fb4e4" compoundref="p_queue_p_8c" startline="120" endline="144">enque</referencedby>
        <referencedby refid="p_queue_p_8c_1a71a9d33f7a1466b6b1e6d7dd391fdbe7" compoundref="p_queue_p_8c" startline="71" endline="96">newPQueue</referencedby>
      </memberdef>
      <memberdef kind="function" id="u_malloc_8c_1a5ed3930d6e86bee548f632e2c571c736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* realloc</definition>
        <argsstring>(void *ap, size_t size)</argsstring>
        <name>realloc</name>
        <param>
          <type>void *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type><ref refid="types_8h_1a7b60c5629e55e8ec87a4547dd4abced4" kindref="member">size_t</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Changes the original size of the continuous memory. If it is possible, it moves the old segment of user memory to a new continuous user memory segment . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>The old position that would be changed if it&apos;s necessary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the continuous user memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new continuous segment of user memory.</para></simplesect>
<simplesect kind="see"><para><ref refid="u_malloc_8h_1adebb229f063e66907017098087cbe791" kindref="member">free()</ref> <ref refid="u_malloc_8h_1a31161ef8eddd18e7781cb947f6f627d5" kindref="member">malloc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" line="23" bodyfile="/Users/Luciano/Desktop/flying-high/src/uMalloc.c" bodystart="23" bodyend="25"/>
        <references refid="sys_malloc_8h_1adac4283ee6b45334ca1ea574599d7532" compoundref="sys_malloc_8c" startline="35" endline="46">sysRealloc</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>User malloc module. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Luciano Zemin, Nicolás Magni, Nicolás Purita </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;../inc/uMalloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmem_area__t" kindref="compound" tooltip="The mem area malloc struct.">memArea_t</ref><sp/>*<sp/>getMem(){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(<ref refid="stdio_8h_1ab7f4e33be6189512770d5aaa43bd03fe" kindref="member">runningProcess</ref>-&gt;<ref refid="structprocess__t_1a19c110397be65fbeb224f20c1a21b76b" kindref="member">dataUmalloc</ref>.<ref refid="structheap_status_1a563eaaea14f23514bd4a6c87f11711dd" kindref="member">mallocMem</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="u_malloc_8c_1adebb229f063e66907017098087cbe791" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="u_malloc_8h_1adebb229f063e66907017098087cbe791" kindref="member" tooltip="Frees up the user memory pointed by ap for futures mallocs.">free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ap){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sys_malloc_8h_1afc18fe654253c72492875d6b15506744" kindref="member" tooltip="Leaves avaiable the segment to be used in futures calls to sysMalloc. The memory...">sysFree</ref>(ap,getMem);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20" refid="u_malloc_8c_1a46627f45f4a4d33db3de37fce9b5a8a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="u_malloc_8h_1a31161ef8eddd18e7781cb947f6f627d5" kindref="member" tooltip="returns a continuous segment of user memory. It could return null if there is not...">malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys_malloc_8h_1a7472d23b0529e946d8dcdf5a0de26c52" kindref="member" tooltip="Function that gives a continuous segment of memory. This memory comes from the function...">sysMalloc</ref>(nbytes,getMem);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23" refid="u_malloc_8c_1a5ed3930d6e86bee548f632e2c571c736" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="u_malloc_8h_1a07b27aa678d6fdc15e47655bcf771a4e" kindref="member" tooltip="Changes the original size of the continuous memory. If it is possible, it moves the...">realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ap,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sys_malloc_8h_1adac4283ee6b45334ca1ea574599d7532" kindref="member" tooltip="This function changes the original size of the logical memory to a new one if it&amp;#39;s...">sysRealloc</ref>(ap,<sp/>size,getMem);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Luciano/Desktop/flying-high/src/uMalloc.c"/>
  </compounddef>
</doxygen>
