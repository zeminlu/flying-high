-Paginacion
	Implementar el alloqueador de paginas
	Fijarse lo de seguridad 

-Terminal/Multitarea
	El usuario hace un read(STDIN, &buffer, 5) desde su app/proceso; esta funci√≥n que es atomica, sabe quien es el proceso que llamo.
	Entonces agarra el proceso y se fija cual es archivo y lee.
	Hay un terminal controller que sabe cual es la terminal activa
	Cuando se hace un write en in stdout si el proceso esta en la terminal activa se refresca en la pantalla si no se hace un write sobre el buffer de la terminal
	Cada vez que se cambia de terminal se refresca la patalla y se hace un flush del buffer de la terminal de salida

-Refactorear MonoOS
	* Renombrar writeController y readController por write y read.	
	* Meter sincronismo, Que la interrupcion de teclado no vaya a pantalla.
	* Agregar reconocimiento de cambio de terminal
	* Separar el modulo de terminal y shell
	* Hacer la funcion read bloackeante cuando se trata de leer de stdin, espera al enter

-Filesystem
	-open
	-close
	-rm
	-read
	-write
	-mktag
	-readtag
	-rmtag

-Applicaciones
	Los tags se separan por *

	-ls
	-cat
	-echo
	-locate por default busca en el tag root si no se pasa la opcion --tags=tag1*tag2*tag3
	-rm ( -r borra la tag y todos los archivos que solo tienen esa tag -d borra la tag si solo si esa tag no tiene archivos)
	-top
	-cd
	-mktag
	-mv
	-cp

-Procesos
	-Generar un stack y heap para el kernel y cada vez que se entra al kernel cambiarlo

-Miscelaneos
	Agregar el blinking cursor de Ark OS a Mono OS
	Separar todo en carpetas
	Capturar argumentos del make --debug-pause --debug-all --debug-level=
