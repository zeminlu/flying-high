%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU enscript 1.6.4
%%CreationDate: Fri Jun 12 15:40:13 2009
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6 4

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (colors.h) def
/fdir () def
/ftail (colors.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (1-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef COLORS_H_) s
5 731 M
(#define COLORS_H_) s
5 709 M
(#define BLACK                   0x0) s
5 698 M
(#define BLUE                    0x1) s
5 687 M
(#define GREEN                   0x2) s
5 676 M
(#define CYAN                    0x3) s
5 665 M
(#define RED                             0x4) s
5 654 M
(#define MAGENTA                 0x5) s
5 643 M
(#define BROWN                   0x6) s
5 632 M
(#define LIGHT_GREY              0x7) s
5 621 M
(#define DARK_GREY               0x8) s
5 610 M
(#define LIGHT_BLUE              0x9) s
5 599 M
(#define LIGHT_GREEN             0xA) s
5 588 M
(#define LIGHT_CYAN              0xB) s
5 577 M
(#define LIGHT_RED               0xC) s
5 566 M
(#define LIGHT_MAGENTA   0xD) s
5 555 M
(#define LIGHT_BROWN             0xE) s
5 544 M
(#define WHITE                   0xF) s
5 522 M
(#define setColor\(bkg,text\) \(\(\(bkg\) << 4\) + \(text\)\) ) s
5 500 M
(#endif) s
_R
S
%%Page: (1) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (config.h) def
/fdir () def
/ftail (config.h) def
% User defined strings:
/fmodstr (jue jun 11 15:15:43 2009) def
/pagenumstr (2-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( * \\file config.h) s
5 720 M
( *) s
5 709 M
( *              \\brief ) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas,  Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef CONFIG_H_) s
5 632 M
(#define CONFIG_H_) s
5 610 M
(#include "colors.h") s
5 588 M
(/*) s
5 577 M
( *      System Properties) s
5 566 M
( */) s
5 555 M
(#define SCREEN_WIDTH 80) s
5 544 M
(#define SCREEN_HEIGTH 25) s
5 533 M
(#define SCREEN_SIZE SCREEN_WIDTH * SCREEN_HEIGTH) s
5 522 M
(#define VIDEO_MEMORY_SIZE SCREEN_SIZE * 2) s
5 511 M
(#define CURSOR_START_COL        0) s
5 500 M
(#define CURSOR_START_ROW        0) s
5 489 M
(#define POINTER_START_COL SCREEN_WIDTH / 2) s
5 478 M
(#define POINTER_START_ROW SCREEN_HEIGTH / 2) s
5 467 M
(#define VIDEO_TAB_STOP 4) s
5 456 M
(#define VIDEO_VTAB_STOP 4) s
5 445 M
(#define CURSOR_START_VISIBLE 1) s
5 434 M
(#define POINTER_START_VISIBLE 1) s
5 423 M
(#define POINTER_COLOR setColor\(GREEN, GREEN\)) s
5 412 M
(#define VIDEO_COLOR setColor\(BLACK, WHITE\)) s
5 401 M
(#define KEYBOARD_REPETITION             3) s
5 390 M
(#define ENABLED 1) s
5 379 M
(#define DISABLED 0) s
5 368 M
(#define MILISECOND_PER_TICKS 55) s
5 357 M
(#define TICKS_PER_SECOND 18) s
5 346 M
(#define DEFAULT_SCREENSAVER_TIME 540) s
5 324 M
(#endif) s
_R
S
%%Page: (1) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (defs.h) def
/fdir () def
/ftail (defs.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (3-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/***************************************************) s
5 731 M
(  Defs.h) s
5 720 M
(        ) s
5 709 M
(****************************************************/) s
5 687 M
(#ifndef _defs_) s
5 676 M
(#define _defs_) s
5 654 M
(#define byte unsigned char) s
5 643 M
(#define word short int) s
5 632 M
(#define dword int) s
5 610 M
(/* Flags para derechos de acceso de los segmentos */) s
5 599 M
(#define ACS_PRESENT     0x80            /* segmento presente en memoria */) s
5 588 M
(#define ACS_CSEG        0x18            /* segmento de codigo */) s
5 577 M
(#define ACS_DSEG        0x10            /* segmento de datos */) s
5 566 M
(#define ACS_READ        0x02            /* segmento de lectura */) s
5 555 M
(#define ACS_WRITE       0x02            /* segmento de escritura */) s
5 544 M
(#define ACS_IDT         ACS_DSEG) s
5 533 M
(#define ACS_INT_386     0x0E            /* Interrupt GATE 32 bits */) s
5 522 M
(#define ACS_INT         \( ACS_PRESENT | ACS_INT_386 \)) s
5 489 M
(#define ACS_CODE        \(ACS_PRESENT | ACS_CSEG | ACS_READ\)) s
5 478 M
(#define ACS_DATA        \(ACS_PRESENT | ACS_DSEG | ACS_WRITE\)) s
5 467 M
(#define ACS_STACK       \(ACS_PRESENT | ACS_DSEG | ACS_WRITE\)) s
5 445 M
(#pragma pack \(1\)                /* Alinear las siguiente estructuras a 1 byte */) s
5 423 M
(/* Descriptor de segmento */) s
5 412 M
(typedef struct {) s
5 401 M
(  word limit,) s
5 390 M
(       base_l;) s
5 379 M
(  byte base_m,) s
5 368 M
(       access,) s
5 357 M
(       attribs,) s
5 346 M
(       base_h;) s
5 335 M
(} DESCR_SEG;) s
5 302 M
(/* Descriptor de interrupcion */) s
5 291 M
(typedef struct {) s
5 280 M
(  word      offset_l,) s
5 269 M
(            selector;) s
5 258 M
(  byte      cero,) s
5 247 M
(            access;) s
5 236 M
(  word      offset_h;) s
5 225 M
(} DESCR_INT;) s
5 203 M
(/* IDTR  */) s
5 192 M
(typedef struct {) s
5 181 M
(  word  limit;) s
5 170 M
(  dword base;) s
5 159 M
(} IDTR;) s
5 137 M
(     ) s
5 115 M
(#endif) s
_R
S
%%Page: (1) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (file.h) def
/fdir () def
/ftail (file.h) def
% User defined strings:
/fmodstr (jue jun 11 15:15:43 2009) def
/pagenumstr (4-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file file.h) s
5 720 M
( *              ) s
5 709 M
( *              \\brief) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( */) s
5 665 M
(#ifndef FILE_H_) s
5 654 M
(#define FILE_H_) s
5 632 M
(#include "types.h") s
5 610 M
(#define MAX_OPEN_FILES 20) s
5 599 M
(#define _READ   0x01) s
5 588 M
(#define _WRITE  0x02) s
5 566 M
(/*) s
5 555 M
( *      FILE Type Definition) s
5 544 M
( */) s
5 533 M
(typedef struct {) s
5 522 M
(        int fd;) s
5 511 M
(        char * buffer;) s
5 500 M
(        char * ptr;) s
5 489 M
(        int flag;) s
5 478 M
(        size_t bufferSize;) s
5 467 M
(} FILE;) s
5 445 M
(/*) s
5 434 M
( * Public Function File System Access) s
5 423 M
( */) s
5 412 M
(int getOpenFilesCount \( void \); ) s
5 401 M
(#endif) s
_R
S
%%Page: (1) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (int_handlers.h) def
/fdir () def
/ftail (int_handlers.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (5-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file int_handlers.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Declarations of all interrupt handlers) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( */) s
5 654 M
(#ifndef INT_HANDLERS_H_) s
5 643 M
(#define INT_HANDLERS_H_) s
5 621 M
(/**) s
5 610 M
( *      \\fn void _int_08_handler \( void \)) s
5 599 M
( *) s
5 588 M
( *              \\brief This function handles the timer tick ) s
5 577 M
( *              interrupt) s
5 566 M
( *) s
5 555 M
( */) s
5 544 M
(void _int_08_handler \( void \);) s
5 522 M
(/**) s
5 511 M
( *      \\fn void _int_80_handler \( void \);) s
5 500 M
( *              ) s
5 489 M
( *              \\brief This function handles the kernel system calls.) s
5 478 M
( *              Posible system calls:) s
5 467 M
( *                      _SYS_WRITE) s
5 456 M
( *                      _SYS_READ) s
5 445 M
( *              This rutine must be load into the IDT in the position 0x80) s
5 434 M
( *) s
5 423 M
( */) s
5 412 M
(void _int_80_handler \( void \);) s
5 390 M
(void _int_74_handler \( void \);) s
5 368 M
(void _int_09_handler \( void \);) s
5 346 M
(#endif) s
_R
S
%%Page: (1) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (io.h) def
/fdir () def
/ftail (io.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (6-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( * \\file io.h) s
5 720 M
( *      ) s
5 709 M
( *              \\brief Declaration of functions and constants related with direct access) s
5 698 M
( *              to hardware) s
5 687 M
( *) s
5 676 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 665 M
( *) s
5 654 M
( */) s
5 632 M
(#ifndef INOUT_H_) s
5 621 M
(#define INOUT_H_) s
5 599 M
(/*) s
5 588 M
( *      Video Memory Address) s
5 577 M
( */) s
5 566 M
(#define VIDEO_MEMORY_ADDRESS \(void *\)0xB8000) s
5 544 M
(/*) s
5 533 M
( *      Port Definitions) s
5 522 M
( */) s
5 500 M
(/**) s
5 489 M
( *      \\fn int inportb \(int port\)) s
5 478 M
( *              \\brief This function grabs the value stored in the given port) s
5 467 M
( *) s
5 456 M
( *              \\param port The desired port number.) s
5 445 M
( *              \\return This function returns an int instance with the value obtained.) s
5 434 M
( *) s
5 423 M
( *              \\code) s
5 412 M
( *                      int value;) s
5 401 M
( *                      value = inport\(0x60\);) s
5 390 M
( *              \\endcode) s
5 379 M
( *) s
5 368 M
( *              \\sa outport\(\)) s
5 357 M
( *) s
5 346 M
( */) s
5 335 M
(int inportb \(int port\);) s
5 313 M
(/**) s
5 302 M
( *      \\fn void outportb \(int port, int value\)) s
5 291 M
( *              \\brief This function stores the given value in the given port.) s
5 280 M
( *) s
5 269 M
( *              \\param port Desired port number.) s
5 258 M
( *              \\param value Desired value to set.) s
5 247 M
( *) s
5 236 M
( *              \\code) s
5 225 M
( *                      outport \(0x64, 0x31\)) s
5 214 M
( *              \\endcode) s
5 203 M
( *) s
5 192 M
( *              \\sa inport\(\)) s
5 181 M
( *) s
5 170 M
( */) s
5 159 M
(void outportb \(int port, int value\);) s
5 137 M
(#endif) s
_R
S
%%Page: (1) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (kasm.h) def
/fdir () def
/ftail (kasm.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (7-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/*********************************************) s
5 731 M
(kasm.h) s
5 709 M
(************************************************/) s
5 687 M
(#include "defs.h") s
5 654 M
(unsigned int    _read_msw\(\);) s
5 632 M
(void            _lidt \(IDTR *idtr\);) s
5 610 M
(void            _mascaraPIC1 \(byte mascara\);  /* Escribe mascara de PIC1 */) s
5 599 M
(void            _mascaraPIC2 \(byte mascara\);  /* Escribe mascara de PIC2 */) s
5 577 M
(void            _Cli\(void\);        /* Deshabilita interrupciones  */) s
5 566 M
(void            _Sti\(void\);      /* Habilita interrupciones  */) s
5 544 M
(void            _int_08_hand\(\);      /* Timer tick */) s
5 522 M
(void            _debug \(void\);) s
_R
S
%%Page: (1) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (kc.h) def
/fdir () def
/ftail (kc.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (8-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**********************) s
5 731 M
( kc.h) s
5 720 M
(**********************/) s
5 709 M
(#include "defs.h") s
5 687 M
(#ifndef _kc_) s
5 676 M
(#define _kc_) s
5 654 M
(#define WHITE_TXT 0x07 /* Atributo de video. Letras blancas, fondo negro */) s
5 632 M
(/* Muestra la imagen de inicio */) s
5 621 M
(void showSplashScreen\(\);) s
5 599 M
(/* Tiempo de espera */) s
5 588 M
(void wait\(int time\);) s
5 566 M
(/* Limpia la pantalla */) s
5 555 M
(void k_clear_screen\(\);) s
5 533 M
(/* Inicializa la entrada del IDT */) s
5 522 M
(void setup_IDT_entry \(DESCR_INT *item, byte selector, dword offset, byte access,) s
5 511 M
(                         byte cero\);) s
5 489 M
(#endif) s
_R
S
%%Page: (1) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (kernel.h) def
/fdir () def
/ftail (kernel.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (9-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "defs.h") s
5 720 M
(/********************************** ) s
5 709 M
(*) s
5 698 M
(*  Kernel) s
5 687 M
(*) s
5 676 M
(***********************************/) s
5 654 M
(#ifndef _kernel_) s
5 643 M
(#define _kernel_) s
5 621 M
(#define OS_PID  0) s
5 599 M
(int \(*player\)\(void\);) s
5 577 M
(typedef int size_t;) s
5 566 M
(typedef short int ssize_t;) s
5 555 M
(typedef enum eINT_80 {WRITE=0, READ} tINT_80;) s
5 544 M
(typedef enum eUSER {U_KERNEL=0, U_NORMAL} tUSERS;) s
5 522 M
(#endif) s
_R
S
%%Page: (1) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (keyboard_adapter.h) def
/fdir () def
/ftail (keyboard_adapter.h) def
% User defined strings:
/fmodstr (vie jun 12 14:05:49 2009) def
/pagenumstr (10-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef _KEYBOARD_ADAPTER_H) s
5 731 M
(#define _KEYBOARD_ADAPTER_H) s
5 709 M
(/*) s
5 698 M
( * \\fn void flushKeyboardBuffer\(void\)) s
5 687 M
( *) s
5 676 M
( *      \\brief This function obtain the character from the keyboard buffer, and) s
5 665 M
( *      it puts it in STDIN.) s
5 654 M
( *) s
5 643 M
( */) s
5 621 M
(void flushKeyboardBuffer\(void\);) s
5 599 M
(#endif) s
_R
S
%%Page: (1) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (keyboard_buffer.h) def
/fdir () def
/ftail (keyboard_buffer.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (11-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/*) s
5 731 M
( *      \\file: keyboard_buffer.h) s
5 720 M
( *) s
5 709 M
( *      \\brief  This is the internal keyboard buffer.) s
5 698 M
( */) s
5 687 M
(#define KEYBOARD_BUFFER_SIZE 256) s
5 665 M
(typedef unsigned char Keycode;) s
5 643 M
(extern Keycode keyboardBuffer[];) s
_R
S
%%Page: (1) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (keyboard_driver.h) def
/fdir () def
/ftail (keyboard_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:04:59 2009) def
/pagenumstr (12-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef KEYBOARD_DRIVER) s
5 731 M
(#define KEYBOARD_DRIVER) s
5 709 M
(/*) s
5 698 M
( *  keyboard_driver.h) s
5 687 M
( */ ) s
5 665 M
(#include "queue.h") s
5 643 M
(/*) s
5 632 M
( *      Functions Section) s
5 621 M
( */) s
5 599 M
(/*) s
5 588 M
( * \\fn void keyboard_driver \( void \)) s
5 577 M
( *) s
5 566 M
( * \\brief This function is the manager of interpretate what key ) s
5 555 M
( * was pressed or released. It controls if the own keyboard buffer) s
5 544 M
( * is full. The keys that are implemented are:) s
5 533 M
( *              - Letters \( upper and lower case \)) s
5 522 M
( *              - Numbers \( If you press SHIFT it will interpretate the symbol) s
5 511 M
( *                                      associated with this key \)) s
5 500 M
( *              - SHIFT buttom) s
5 489 M
( *              - CAPS-LOCK) s
5 478 M
( *) s
5 467 M
( */) s
5 445 M
(void keyboard_driver\( void \);) s
5 423 M
(/*) s
5 412 M
( *) s
5 401 M
( *  \\fn void SetKeyState\(Keycode scancode \)) s
5 390 M
( *) s
5 379 M
( *  \\brief      This function detect if a control key was pressed and set his) s
5 368 M
( *              internal flag.) s
5 357 M
( */) s
5 335 M
(void SetKeyState\( Keycode  scanCode \);) s
5 313 M
(/*) s
5 302 M
( *) s
5 291 M
( * \\fn int shiftPressed\(void\)) s
5 280 M
( *) s
5 269 M
( * \\brief Return TRUE if the shift key was pressed) s
5 258 M
( */) s
5 236 M
(int shiftIsPressed\( void \);) s
5 214 M
(/*) s
5 203 M
( *) s
5 192 M
( * \\fn int capsIsPressed\(void\)) s
5 181 M
( *) s
5 170 M
( * \\brief Return TRUE if caps-lock key was pressed) s
5 159 M
( */) s
5 126 M
(int capsIsPressed \( void \);) s
5 104 M
(/*) s
5 93 M
( *) s
5 82 M
( * \\fn int ctrlPressed\(void\)) s
5 71 M
( *) s
5 60 M
( * \\brief Return TRUE if control key was pressed) s
5 49 M
(*/) s
5 27 M
(int ctrlIsPressed\( void \);) s
_R
S
%%Page: (2) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (keyboard_driver.h) def
/fdir () def
/ftail (keyboard_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:04:59 2009) def
/pagenumstr (12-2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(int getRepetition\(void \);) s
5 687 M
(void setRepetition\(int newRep\);) s
5 665 M
(/*) s
5 654 M
( * \\fn int checkKeyboardActivity\(void\)) s
5 643 M
( *) s
5 632 M
( * \\brief       Return a 1 if the keyboard routine was called, so the keyboard) s
5 621 M
( *                      had interrupted. This funtcion is used by the screensaver, to turn) s
5 610 M
( *                      off.) s
5 599 M
( */) s
5 577 M
(int checkKeyboardActivity\(void\);) s
5 555 M
(/*) s
5 544 M
( * \\fn void setKeyboardActivity\(void\)) s
5 533 M
( *) s
5 522 M
( * \\brief Set the keyboard activity flag to 0.) s
5 511 M
( */) s
5 489 M
(void setKeyboardActivity\(void\);) s
5 467 M
(#endif) s
_R
S
%%Page: (1) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (mouse_driver.h) def
/fdir () def
/ftail (mouse_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (13-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/*) s
5 731 M
( * \\file mouse_driver.h) s
5 720 M
( *) s
5 709 M
( *      \\author: Guido Marucci Blas & Nicolas Purita & Luciano Zemin) s
5 698 M
( */) s
5 676 M
(#ifndef MOUSE_DRIVER_H_) s
5 665 M
(#define MOUSE_DRIVER_H_) s
5 643 M
(/**) s
5 632 M
( *      \\fn void initMouse \(void\)) s
5 621 M
( *      \\brief This function initiates the mouse and leaves it working with the default val) s
5 610 M
(ues, through the IRQ12.) s
5 599 M
( *      ) s
5 588 M
( *      \\code) s
5 577 M
( *          mouseInit\(\);) s
5 566 M
( *      \\endcode) s
5 555 M
( */) s
5 544 M
(void initMouse \(void\);) s
5 522 M
(/**) s
5 511 M
( *      \\fn void refreshMouse \(void\)) s
5 500 M
( *      \\brief This function checks weather the mouse informed a click or a movement, and r) s
5 489 M
(efreshes it on the screen.) s
5 478 M
( *      ) s
5 467 M
( *      \\code) s
5 456 M
( *          mouseInit\(\);) s
5 445 M
( *      \\endcode) s
5 434 M
( *      ) s
5 423 M
( *      \\sa mouseDriver\(\)) s
5 412 M
( */) s
5 401 M
(void refreshMouse\(void\);) s
5 379 M
(/**) s
5 368 M
( *      \\fn void mouseDriver \(void\)) s
5 357 M
( *      \\brief This function is the one called by the INT 74h handler \(IRQ12\), and it colle) s
5 346 M
(cts the data sent by the mouse) s
5 335 M
( *              sticking to the PS/2 mouse protocol, and refreshes the values that later re) s
5 324 M
(freshMouse\(\) will check.) s
5 313 M
( *      ) s
5 302 M
( *      \\code) s
5 291 M
( *          mouseDriver\(\);) s
5 280 M
( *      \\endcode) s
5 269 M
( * ) s
5 258 M
( *      \\sa refreshMouse\(\)) s
5 247 M
( */) s
5 236 M
(void mouseDriver \(void\);) s
5 214 M
(/**) s
5 203 M
( *      \\fn void setMouseRate \(int rate\)) s
5 192 M
( *      \\brief This function sets the speed of the mouse according to the rate given parame) s
5 181 M
(ter.) s
5 170 M
( *      ) s
5 159 M
( *      \\param rate The int parameter that upwards from 0, sets the speed of the mouse, dec) s
5 148 M
(reasingly.) s
5 137 M
( *      ) s
5 126 M
( *      \\code) s
5 115 M
( *          setMouseRate\(10\);) s
5 104 M
( *      \\endcode) s
5 93 M
( *      ) s
5 82 M
( *      \\sa setMouseState\(\)) s
5 71 M
( */) s
5 60 M
(void setMouseRate \(int rate\);) s
5 38 M
(/**) s
5 27 M
( *      \\fn void setMouseState \(int newState\)) s
5 16 M
( *      \\brief This function enables or disables the mouse refreshing on the screen.) s
5 5 M
( *      ) s
_R
S
%%Page: (2) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (mouse_driver.h) def
/fdir () def
/ftail (mouse_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (13-2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *      \\param newState The new state for the mouse. It can be wether ENABLED or DISABLED.) s
5 731 M
( *      ) s
5 720 M
( *      \\code) s
5 709 M
( *          setMouseState\(ENABLED\);) s
5 698 M
( *      \\endcode) s
5 687 M
( * ) s
5 676 M
( *      \\sa setMouseRate\(\)) s
5 665 M
( */) s
5 654 M
(void setMouseState \(int newState\);) s
5 632 M
(/**) s
5 621 M
( *      \\fn int checkMouseActivity \(void\)) s
5 610 M
( *      \\brief This function checks wether the mouse driver acknowledged mouse activity sin) s
5 599 M
(ce the last call to this function.) s
5 588 M
( *              Disabling the mouse through the setMouseState function doesn't modify the f) s
5 577 M
(unctionality of this function.) s
5 566 M
( *) s
5 555 M
( *      \\return TRUE if there has been mouse activity since last call, FALSE if not.       ) s
5 544 M
( *) s
5 533 M
( *      \\code) s
5 522 M
( *          int activity = checkMouseActivity\(\);) s
5 511 M
( *      \\endcode) s
5 500 M
( * ) s
5 489 M
( *      \\sa setMouseState\(\)) s
5 478 M
( */) s
5 467 M
(int checkMouseActivity \(void\);) s
5 445 M
(#endif) s
_R
S
%%Page: (1) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (queue.h) def
/fdir () def
/ftail (queue.h) def
% User defined strings:
/fmodstr (vie jun 12 14:07:13 2009) def
/pagenumstr (14-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/*) s
5 731 M
( *      \\file queue.h) s
5 720 M
( *      \\author Guido Marucci Blas, Luciano Zemin & Nicolas Purita) s
5 709 M
( *) s
5 698 M
( */) s
5 687 M
(#include "keyboard_buffer.h") s
5 665 M
(/*) s
5 654 M
( * Define Section) s
5 643 M
( */) s
5 610 M
(enum { FALSE, TRUE };) s
5 577 M
(/*) s
5 566 M
( * Function Section) s
5 555 M
( */) s
5 533 M
(/*) s
5 522 M
( *      \\fn void charEnque \( keycode elem \)) s
5 511 M
( *) s
5 500 M
( *      \\param keycode  This function receive the ASCII code of the key to enqueue in the b) s
5 489 M
(uffer.) s
5 478 M
( *) s
5 467 M
( *      \\ret                    TRUE if the key was added or FALSE if the buffer is FULL) s
5 456 M
( */) s
5 434 M
(int charEnque \( Keycode elem \);) s
5 412 M
(/*) s
5 401 M
( * \\fn keycode charDeque \( void \)) s
5 390 M
( *) s
5 379 M
( * \\brief Dequeue an element while the buffer is not Empty) s
5 368 M
( *) s
5 357 M
( * \\ret         The keycode) s
5 346 M
( */) s
5 324 M
(Keycode charDeque \( void \);) s
5 302 M
(/*) s
5 291 M
( *      \\fn int kbBufferIsEmpty \( void \)) s
5 280 M
( *) s
5 269 M
( *      \\brief return if the buffer is empty) s
5 258 M
( *) s
5 247 M
( *      \\ret TRUE if it's empty, FALSE if not) s
5 236 M
( */) s
5 214 M
(int kbBufferIsEmpty \( void \);) s
_R
S
%%Page: (1) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (screensaver.h) def
/fdir () def
/ftail (screensaver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:09:14 2009) def
/pagenumstr (15-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/*) s
5 731 M
( *      \\file screensaver.h) s
5 720 M
( *) s
5 709 M
( */) s
5 698 M
(#ifndef SCREENSAVER_H_) s
5 687 M
(#define SCREENSAVER_H_) s
5 665 M
(/*) s
5 654 M
( *      \\fn ins screenSaver\(void\)) s
5 643 M
( *) s
5 632 M
( *      \\brief  This function act after a certain time without any keyboard) s
5 621 M
( *                      and mouse interruption. It clear the screen and put a simple messag) s
5 610 M
(e) s
5 599 M
( *                      like this "ARK OS 1.0". When it recieve the order that someone peri) s
5 588 M
(feric) s
5 577 M
( *                      had interrupted, the screensaver disappear.) s
5 566 M
( *) s
5 555 M
( */) s
5 533 M
(int screenSaver\( void \);) s
5 511 M
(/*) s
5 500 M
( * \\fn int getScreenSaverTime\(void\)) s
5 489 M
( *) s
5 478 M
( * \\brief       Return the time that the screensaver is waiting to) s
5 467 M
( *                      be showed.) s
5 456 M
( */) s
5 434 M
(int getScreenSaverTime\(void\);) s
5 412 M
(/*) s
5 401 M
( * \\fn void setScreenSaverTime\( int \)) s
5 390 M
( *) s
5 379 M
( * \\brief Modify the screensaver time. Set the new time.) s
5 368 M
( */) s
5 346 M
(void setScreenSaverTime\(int num\);) s
5 324 M
(#endif) s
_R
S
%%Page: (1) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (shell.h) def
/fdir () def
/ftail (shell.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (16-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file shell.h) s
5 720 M
( *) s
5 709 M
( *              \\brief) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef SHELL_H_) s
5 632 M
(#define SHELL_H_) s
5 610 M
(/**) s
5 599 M
( * \\fn int shell \( void \)) s
5 588 M
( *) s
5 577 M
( *              \\brief The function that runs the shell application) s
5 566 M
( *) s
5 555 M
( */) s
5 544 M
(int shell \( void \);) s
5 522 M
(#endif) s
_R
S
%%Page: (1) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (stdio.h) def
/fdir () def
/ftail (stdio.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (17-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file stdio.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Definitions for all standard input and output and) s
5 698 M
( *              declaration of all functions to send/recive data to/from) s
5 687 M
( *              standar input/output.) s
5 676 M
( *) s
5 665 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin      ) s
5 654 M
( *) s
5 643 M
( */) s
5 621 M
(#ifndef STDIO_H_) s
5 610 M
(#define STDIO_H_) s
5 588 M
(#include "file.h") s
5 566 M
(#define EOF     -1) s
5 555 M
(extern FILE * stdinFile;) s
5 544 M
(extern FILE * stdoutFile;) s
5 533 M
(extern FILE * inattFile;) s
5 522 M
(extern FILE * outattFile;) s
5 500 M
(/*) s
5 489 M
( *      Standard I/O Files Pointers) s
5 478 M
( */) s
5 467 M
(#define stdin \(stdinFile\)) s
5 456 M
(#define stdout \(stdoutFile\)) s
5 445 M
(#define inatt \(inattFile\)) s
5 412 M
(/*) s
5 401 M
( *      Standard I/O Functions) s
5 390 M
( */) s
5 379 M
(#define puts\(str\) fputs\(\(str\), stdout\)) s
5 368 M
(#define putchar\(c\) fputc\(\(c\), stdout\)) s
5 357 M
(#define getchar\(\) fgetc\(stdin\)) s
5 335 M
(int fputs \( const char *s, FILE * stream \);) s
5 313 M
(int fputc \( int c, FILE * stream \);) s
5 291 M
(char * fgets \( char * s, int size, FILE * stream \);) s
5 269 M
(int fgetc \( FILE * stream \);) s
5 247 M
(void flush \( FILE * strema \);) s
5 225 M
(#endif) s
_R
S
%%Page: (1) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (string.h) def
/fdir () def
/ftail (string.h) def
% User defined strings:
/fmodstr (dom jun 07 22:16:01 2009) def
/pagenumstr (18-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file string.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Declaration of all functions that deals with strings and buffers.) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin      ) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef STRING_H_) s
5 632 M
(#define STRING_H_) s
5 610 M
(#include "types.h") s
5 588 M
(void * memcpy\(void * dest, const void * source, size_t n\); ) s
5 566 M
(int strlen \( const char * str \);) s
5 544 M
(char * strtok \( char * s, char * tokens \);) s
5 522 M
(int strcmp \( char * s1, char * s2 \);) s
5 500 M
(char * strcpy \( char * dest, char * source \);) s
5 478 M
(int toInt \( char * string \);) s
5 456 M
(char * toLowerCase \( char * string \);) s
5 445 M
(#endif) s
_R
S
%%Page: (1) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (syscall.h) def
/fdir () def
/ftail (syscall.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (19-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file syscall.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Definitions for all system call constants.) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef SYSCALL_H_) s
5 632 M
(#define SYSCALL_H_) s
5 610 M
(#define _SYS_WRITE      0) s
5 599 M
(#define _SYS_READ       1) s
5 577 M
(#endif) s
_R
S
%%Page: (1) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (system.h) def
/fdir () def
/ftail (system.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (20-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file system.h) s
5 720 M
( *      ) s
5 709 M
( *              \\brief  ) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( */) s
5 654 M
(#ifndef SYSTEM_H_) s
5 643 M
(#define SYSTEM_H_) s
5 621 M
(#define STDIN   0) s
5 610 M
(#define STDOUT  1) s
5 599 M
(#define IN_ATT  2) s
5 588 M
(#define OUT_ATT 3) s
5 577 M
(#define LIVE 1) s
5 566 M
(#define DEAD 0) s
5 544 M
(enum PROCCESS { TERMINAL, SHELL, SCREEN_SAVER };) s
5 522 M
(typedef int \(*proccessT\)\(void\);) s
5 500 M
(/**) s
5 489 M
( *      \\fn void rebootSystem\(void\)) s
5 478 M
( *) s
5 467 M
( *              \\brief Reboots the system) s
5 456 M
( *) s
5 445 M
( */) s
5 434 M
(void rebootSystem\(void\);) s
5 412 M
(/**) s
5 401 M
( *      \\fn void launchApp \(int app\)) s
5 390 M
( *      \\brief This function sets the the desired application to be run after the moment it) s
5 379 M
( is called.) s
5 368 M
( *      ) s
5 357 M
( *      \\param app The desired application to be run.) s
5 346 M
( *      ) s
5 335 M
( *      \\code) s
5 324 M
( *          launchApp\(SCREEN_SAVER\);) s
5 313 M
( *      \\endcode) s
5 302 M
( *      ) s
5 291 M
( *      \\sa runApp\(\) isAppRunning\(\)) s
5 280 M
( */) s
5 269 M
(void launchApp \( int app \);) s
5 247 M
(/**) s
5 236 M
( *      \\fn void runApp \(void\)) s
5 225 M
( *      \\brief This function runs the application setted by launchApp\(\).) s
5 214 M
( *      ) s
5 203 M
( *      \\code) s
5 192 M
( *          runApp\(\);) s
5 181 M
( *      \\endcode) s
5 170 M
( *      ) s
5 159 M
( *      \\sa launchApp\(\) isAppRunning\(\)) s
5 148 M
( */) s
5 137 M
(void runApp \(void\);) s
5 115 M
(/**) s
5 104 M
( *      \\fn void isAppRunning \(int app\)) s
5 93 M
( *      \\brief This function checks wether the given function is actually running or not.) s
5 82 M
( *      ) s
5 71 M
( *      \\param app The desired application to be checked.) s
5 60 M
( *      ) s
5 49 M
( *      \\return TRUE if the application is currently running, FALSE if not.) s
5 38 M
( *      ) s
5 27 M
( *      \\code) s
5 16 M
( *          int isTerminalRunning = isAppRunning\(TERMINAL\);) s
5 5 M
( *      \\endcode) s
_R
S
%%Page: (2) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (system.h) def
/fdir () def
/ftail (system.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (20-2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *      ) s
5 731 M
( *      \\sa runApp\(\) launchApp\(\)) s
5 720 M
( */) s
5 709 M
(int isAppRunning \(int app\);) s
5 687 M
(/**) s
5 676 M
( * \\fn void wait \( int miliseconds \)) s
5 665 M
( *) s
5 654 M
( *              \\brief Stops the the execution for n miliseconds.) s
5 643 M
( *) s
5 632 M
( */) s
5 621 M
(void wait \( int miliseconds \);) s
5 599 M
(#endif) s
_R
S
%%Page: (1) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (timerTick.h) def
/fdir () def
/ftail (timerTick.h) def
% User defined strings:
/fmodstr (jue jun 11 15:15:43 2009) def
/pagenumstr (21-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file timerTick.h) s
5 720 M
( *) s
5 709 M
( *              \\brief ) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef TIMERTICK_H_) s
5 632 M
(#define TIMERTICK_H_) s
5 610 M
(void timerTick \(void\);) s
5 588 M
(#endif) s
_R
S
%%Page: (1) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (types.h) def
/fdir () def
/ftail (types.h) def
% User defined strings:
/fmodstr (vie jun 05 20:41:15 2009) def
/pagenumstr (22-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file types.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Definition for system dependent types) s
5 698 M
( *) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef TYPES_H_) s
5 632 M
(#define TYPES_H_) s
5 610 M
(/*) s
5 599 M
( *      Type definitions) s
5 588 M
( */) s
5 577 M
(typedef unsigned int size_t;) s
5 566 M
(typedef unsigned int ssize_t;) s
5 544 M
(/*) s
5 533 M
( *      NULL Pointer Definition) s
5 522 M
( */) s
5 511 M
(#define NULL \(void *\)0x0) s
5 489 M
(#endif) s
_R
S
%%Page: (1) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (unistd.h) def
/fdir () def
/ftail (unistd.h) def
% User defined strings:
/fmodstr (sáb jun 06 19:20:40 2009) def
/pagenumstr (23-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file unistd.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Definitions for all UNIX Standard system calls functions) s
5 698 M
( *              ) s
5 687 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 676 M
( *) s
5 665 M
( */) s
5 643 M
(#ifndef UNISTD_H_) s
5 632 M
(#define UNISTD_H_) s
5 610 M
(#include "types.h") s
5 588 M
(/*) s
5 577 M
( *      System Calls Functions) s
5 566 M
( */) s
5 544 M
(/**) s
5 533 M
( *      \\fn ssize_t write \( int fileds, const void * buffer, size_t count \)) s
5 522 M
( *) s
5 511 M
( *              \\brief write\(\) writes "count" bytes from the buffer pointed by "buffer") s
5 500 M
( *              into the file descripted by the file descriptor "fileds".) s
5 489 M
( *) s
5 478 M
( *              \\param fileds the file descriptor for the file where the data is going) s
5 467 M
( *              to be written.) s
5 456 M
( *              \\param buffer pointer to the buffer where the information to be written) s
5 445 M
( *              is hold.) s
5 434 M
( *              \\param count number of bytes that will be written in the file from the) s
5 423 M
( *              buffer.) s
5 412 M
( *) s
5 401 M
( *              \\return the amount of bytes successfully written in the file or -1 in ) s
5 390 M
( *              case of error.) s
5 379 M
( *) s
5 368 M
( *              Example:) s
5 357 M
( *                      \\code) s
5 346 M
( *                              char * message = "Hello World!\\n";) s
5 335 M
( *                              write\(STDOUT, \(const void *\)message, strlen\(message\)\);) s
5 324 M
( *                      \\endcode) s
5 313 M
( *) s
5 302 M
( *              \\sa read\(\)) s
5 291 M
( *) s
5 280 M
( */) s
5 269 M
(ssize_t write \( int fileds, const void * buffer, size_t count \);) s
5 247 M
(/**) s
5 236 M
( *      \\fn ssize_t read \( int fileds, void * buffer, size_t count \);) s
5 225 M
( *) s
5 214 M
( *              \\brief read\(\) reads "count" bytes from the file descripted by) s
5 203 M
( *              the file descriptor "fileds" and saves it into the buffer ) s
5 192 M
( *              pointed by "buffer") s
5 181 M
( *              ) s
5 170 M
( *              \\param fileds the file descriptor for the file where the data is going) s
5 159 M
( *              to be read.) s
5 148 M
( *              \\param buffer pointer to the buffer where the information is going to) s
5 137 M
( *              written.) s
5 126 M
( *              \\param count number of bytes that will be written in the buffeer from the) s
5 115 M
( *              file.) s
5 104 M
( *) s
5 93 M
( *              \\return the amount of bytes that were successfully read from the file) s
5 82 M
( *              or -1 in case of error.) s
5 71 M
( *) s
5 60 M
( *              Example) s
5 49 M
( *                      \\code) s
5 38 M
( *                              if \( read\(STDIN, buffer, VIDEO_SIZE\) != VIDEO_SIZE \)) s
5 27 M
( *                                      printf\("Error: video memory could not be read\\n"\);) s
5 16 M
( *                      \\endcode) s
5 5 M
( *) s
_R
S
%%Page: (2) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (unistd.h) def
/fdir () def
/ftail (unistd.h) def
% User defined strings:
/fmodstr (sáb jun 06 19:20:40 2009) def
/pagenumstr (23-2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *              \\sa write\(\)) s
5 731 M
( *) s
5 720 M
( */) s
5 709 M
(ssize_t read \( int fileds, void * buffer, size_t count \);) s
5 687 M
(#endif) s
_R
S
%%Page: (1) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (video_adapter.h) def
/fdir () def
/ftail (video_adapter.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (24-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file video_adapter.h) s
5 720 M
( *) s
5 709 M
( *              \\brief This file defines the basic functions to connect buffers with ) s
5 698 M
( *              the video driver.) s
5 687 M
( *) s
5 676 M
( *              \\author Guido Marucci Blas, Nicolas Purita & Luciano Zemin) s
5 665 M
( *) s
5 654 M
( */) s
5 643 M
(#ifndef VIDEO_ADAPTER_H_) s
5 632 M
(#define VIDEO_ADAPTER_H_) s
5 621 M
(#include "stdio.h") s
5 599 M
(void bufferMapper \( FILE *f/*, FILE *att*/ \);) s
5 577 M
(/**) s
5 566 M
( *      \\fn void flushStdScreen\(void\)) s
5 555 M
( *) s
5 544 M
( *              \\brief Flush the stdout file into the video buffer and) s
5 533 M
( *              refreshes the screen.) s
5 522 M
( *) s
5 511 M
( */) s
5 500 M
(void flushStdScreen\(void\);) s
5 478 M
(#endif) s
_R
S
%%Page: (1) 29
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\file video_driver.h) s
5 720 M
( *) s
5 709 M
( *              \\brief Defines the basic function to manage the video screen, cursor &  mou) s
5 698 M
(se) s
5 687 M
( *              pointer.) s
5 676 M
( *) s
5 665 M
( *              \\author Guido Marucci Blas, Nicolas Purita, Luciano Zemin) s
5 654 M
( *) s
5 643 M
( */) s
5 621 M
(#ifndef VIDEO_DRIVER_H_) s
5 610 M
(#define VIDEO_DRIVER_H_) s
5 588 M
(/*) s
5 577 M
( *      Special Characters Definition) s
5 566 M
( */) s
5 544 M
(/**) s
5 533 M
( *      \\fn void refreshScreen \( void \)) s
5 522 M
( *      ) s
5 511 M
( *              \\brief Updates all changes made to video buffer into screen) s
5 500 M
( *) s
5 489 M
( */) s
5 478 M
(void refreshScreen \( void \);) s
5 445 M
(/**) s
5 434 M
( * \\fn void initVideo \( int cursorEnabled, int pointerEnabled \)) s
5 423 M
( *) s
5 412 M
( *              \\brief Initializes the video driver, by setting the initial) s
5 401 M
( *              cursor, pointer position, setting their visibility, enabling) s
5 390 M
( *              the blinking cursor and defining cursor shape.) s
5 379 M
( *) s
5 368 M
( *              \\param cursorEnabled zero to disable the cursor, not zero to enable the cur) s
5 357 M
(sor.) s
5 346 M
( *              \\param pointerEnabled zero to disable the cursor, not zero to enable the cu) s
5 335 M
(rsor.) s
5 324 M
( */) s
5 313 M
(void initVideo \( int cursorEnabled, int pointerEnabled \);) s
5 291 M
(/**) s
5 280 M
( * \\fn void incCursor \( void \)) s
5 269 M
( *) s
5 258 M
( *              \\brief Increments the position of the cursor by one unit.) s
5 247 M
( *              Automatically resolves new lines and screen scrolling.) s
5 236 M
( *) s
5 225 M
( */) s
5 214 M
(void incCursor \( void \);) s
5 192 M
(/**) s
5 181 M
( *      \\fn void decCursor\( void \)) s
5 170 M
( *) s
5 159 M
( *              \\brief Decrements the position of the cursor by one unit.) s
5 148 M
( *              Automatically resolves jumps to previous lines.) s
5 137 M
( *) s
5 126 M
( */) s
5 115 M
(void decCursor\( void \);) s
5 93 M
(/**) s
5 82 M
( * \\fn int setCursorVisibility \( int b \)) s
5 71 M
( *) s
5 60 M
( *              \\brief Sets the cursor's visibility.) s
5 49 M
( *              Zero to turn it off not zero to turn it on.) s
5 38 M
( *) s
5 27 M
( *              \\return The actual state of visibility) s
5 16 M
( *) s
5 5 M
( */) s
_R
S
%%Page: (2) 30
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(int setCursorVisibility \( int b \);) s
5 720 M
(/**) s
5 709 M
( *      \\fn int setCursorPosition \( int row, int col \)) s
5 698 M
( *) s
5 687 M
( *              \\brief Sets the cursor's position.) s
5 676 M
( *) s
5 665 M
( *              \\param row the new row position.) s
5 654 M
( *              \\param col the new col position.) s
5 643 M
( *) s
5 632 M
( *              \\return the offset from the \(0,0\) including) s
5 621 M
( *              the attribute byte.) s
5 610 M
( *) s
5 599 M
( */) s
5 588 M
(int setCursorPosition \( int row, int col \);) s
5 566 M
(/**) s
5 555 M
( *      \\fn int setCursorPositionByOffset \( int offset \)) s
5 544 M
( *) s
5 533 M
( *              \\brief Sets the cursor's position) s
5 522 M
( *) s
5 511 M
( *              \\param offset the offset from the \(0,0\) including) s
5 500 M
( *              the attribute byte.) s
5 489 M
( *) s
5 478 M
( */) s
5 467 M
(int setCursorPositionByOffset \( int offset \);) s
5 434 M
(/**) s
5 423 M
( *      \\fn void getCursorPosition \( int * row, int * col \)) s
5 412 M
( *) s
5 401 M
( *              \\brief Gets the actual cursor's position.) s
5 390 M
( *) s
5 379 M
( *              \\param row a pointer to int where the actual row position will be returned.) s
5 368 M
( Must not be NULL.) s
5 357 M
( *              \\param col a pointer to int where the acutal col position will bie returned) s
5 346 M
(. Must not be NULL.) s
5 335 M
( *) s
5 324 M
( */) s
5 313 M
(void getCursorPosition \( int * row, int * col \);) s
5 291 M
(/**) s
5 280 M
( *      \\fn int setPointerPosition \( int row, int col \)) s
5 269 M
( *) s
5 258 M
( *              \\brief Sets the mouse pointer's position.) s
5 247 M
( *) s
5 236 M
( *              \\param row the new row position.) s
5 225 M
( *              \\param col the new col position.) s
5 214 M
( *) s
5 203 M
( *              \\return the offset from \(0, 0\) incliding the attribute byte.) s
5 192 M
( *) s
5 181 M
( */) s
5 170 M
(int setPointerPosition \( int row, int col \);) s
5 137 M
(/**) s
5 126 M
( *      \\fn int setPointerPositionByOffset \( int offset \)) s
5 115 M
( *) s
5 104 M
( *              \\brief Sets the pointer's position.) s
5 93 M
( *) s
5 82 M
( *              \\param offset the offset from \(0,0\) including the attribute byte.) s
5 71 M
( *) s
5 60 M
( */) s
5 49 M
(int setPointerPositionByOffset \( int offset \);) s
5 16 M
(/**) s
5 5 M
( *      \\fn int getPointerPosition \( int * row, int * col \)) s
_R
S
%%Page: (3) 31
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *) s
5 731 M
( *              \\brief Gets the pointer's position.) s
5 720 M
( *) s
5 709 M
( *              \\row a pointer to int where the actual row position will be returned. Must ) s
5 698 M
(not be NULL.) s
5 687 M
( *              \\col a pointer to int where the actual col position will be returned. Must ) s
5 676 M
(not be NLL.) s
5 665 M
( *) s
5 654 M
( *              \\return the offset from \(0,0\) including the attribute offset.) s
5 643 M
( *) s
5 632 M
( */) s
5 621 M
(int getPointerPosition \( int * row, int * col \);) s
5 599 M
(/**) s
5 588 M
( *      \\fn int setPointerVisibility \( int b \)) s
5 577 M
( *) s
5 566 M
( *              \\brief Sets the pointer's visibility) s
5 555 M
( *) s
5 544 M
( *              \\param b zero to turn it off, not zero to turn it on.) s
5 533 M
( *) s
5 522 M
( *              \\return the actual state of visibility.) s
5 511 M
( *) s
5 500 M
( */) s
5 489 M
(int setPointerVisibility \( int b \);) s
5 467 M
(/**) s
5 456 M
( *      \\fn int isPointerVisible \( void \)) s
5 445 M
( *) s
5 434 M
( *              \\brief Gets the acutal state of visibility) s
5 423 M
( *) s
5 412 M
( *              \\return the actul state of visibility.) s
5 401 M
( *) s
5 390 M
( */) s
5 379 M
(int isPointerVisible \( void \);) s
5 346 M
(/**) s
5 335 M
( * \\fn int getPointerColor \( void \)) s
5 324 M
( *) s
5 313 M
( *              \\brief Gets the poiter's color) s
5 302 M
( *) s
5 291 M
( *              \\return A color code.) s
5 280 M
( *) s
5 269 M
( */) s
5 258 M
(int getPointerColor \( void \);) s
5 236 M
(/**) s
5 225 M
( *      \\fn int setPointerColor \( int color \)) s
5 214 M
( *) s
5 203 M
( *              \\brief Sets the pointer's color) s
5 192 M
( *) s
5 181 M
( *              \\param color A color code.) s
5 170 M
( *              \\return the new pointer's color code.) s
5 159 M
( *) s
5 148 M
( */) s
5 137 M
(int setPointerColor \( int color \);) s
5 115 M
(/**) s
5 104 M
( *      \\fn int getVideoColor \( void \)) s
5 93 M
( *) s
5 82 M
( *              \\brief Gets the actual default video color) s
5 71 M
( *) s
5 60 M
( *              \\return the actual video color code) s
5 49 M
( *) s
5 38 M
( */) s
5 27 M
(int getVideoColor \( void \);) s
_R
S
%%Page: (4) 32
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/**) s
5 731 M
( *      \\fn int setVideoColor \( int color \)) s
5 720 M
( *) s
5 709 M
( *              \\brief Set the default video color) s
5 698 M
( *) s
5 687 M
( *              \\param color the new video color code) s
5 676 M
( *              \\return the new video color code) s
5 665 M
( *) s
5 654 M
( */) s
5 643 M
(int setVideoColor \( int color \);) s
5 610 M
(/**) s
5 599 M
( *      \\fn int paintArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLo) s
5 588 M
(wer_y \)) s
5 577 M
( *) s
5 566 M
( *              \\brief Paints an area delimited by two opossite points by changing the back) s
5 555 M
(ground color) s
5 544 M
( *              with the font color.) s
5 533 M
( *) s
5 522 M
( *              \\return A number different from zero if succed zero if not.) s
5 511 M
( *) s
5 500 M
( */) s
5 489 M
(int paintArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLower_y \);) s
5 456 M
(/**) s
5 445 M
( *      \\fn int copyArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLow) s
5 434 M
(er_y, char * buffer \)) s
5 423 M
( *) s
5 412 M
( *              \\brief Copies an area delimited by two opposite points including the attrib) s
5 401 M
(ute byte into a buffer.) s
5 390 M
( *) s
5 379 M
( *) s
5 368 M
( *              \\return A number different from zero if succed zero if not.) s
5 357 M
( *) s
5 346 M
( */) s
5 335 M
(int copyArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLower_y, char *) s
5 324 M
( buffer \);) s
5 302 M
(/**) s
5 291 M
( *      \\fn int pasteArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLo) s
5 280 M
(wer_y, char * buffer \)) s
5 269 M
( *) s
5 258 M
( *              \\brief Pastes a buffer into an area delimited by two opposite points includ) s
5 247 M
(ing the attribute byte.) s
5 236 M
( *) s
5 225 M
( *              \\return A number different from zero if succed zero if not.) s
5 214 M
( *) s
5 203 M
( */) s
5 192 M
(int pasteArea \( int leftUpper_x, int leftUpper_y, int rightLower_x, int rightLower_y, char ) s
5 181 M
(* buffer \);) s
5 159 M
(/**) s
5 148 M
( *      \\fn void putCharAtCurrentPos \( int c, int color \)) s
5 137 M
( *) s
5 126 M
( *              \\brief Puts a character into the video buffer at the current cursor positio) s
5 115 M
(n) s
5 104 M
( *) s
5 93 M
( *              \\param c the character to be putted into the video buffer) s
5 82 M
( *              \\param color the color code of the character) s
5 71 M
( *) s
5 60 M
( *) s
5 49 M
( */) s
5 38 M
(void putCharAtCurrentPos \( int c, int color \);) s
5 5 M
(/**) s
_R
S
%%Page: (5) 33
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *  \\fn void printChar \( int c \)) s
5 731 M
( *) s
5 720 M
( *              \\brief Puts a character into the video buffer at the current position and m) s
5 709 M
(oves the cursor.) s
5 698 M
( *) s
5 687 M
( *              \\param c the character to be putted into the video buffer) s
5 676 M
( *) s
5 665 M
( */) s
5 654 M
(void printChar \( int c \);) s
5 621 M
(/**) s
5 610 M
( *      \\fn void printColorChar \( int c, int color \)) s
5 599 M
( *) s
5 588 M
( *              \\brief Puts a character into the video buffer at the current position and m) s
5 577 M
(oves the cursor.) s
5 566 M
( *              ) s
5 555 M
( *              \\param c the character to be putted into the video buffer) s
5 544 M
( *              \\parma color the color code of the character.) s
5 533 M
( *) s
5 522 M
( */) s
5 511 M
(void printColorChar \( int c, int color \);) s
5 489 M
(/**) s
5 478 M
( *      \\fn int putCharAtFixedPos \( int c, int color, int row, int col \)) s
5 467 M
( *) s
5 456 M
( *              \\brief Puts a character into the video buffer at a given position.) s
5 445 M
( *) s
5 434 M
( *              \\param c the character to be putted into the video buffer) s
5 423 M
( *              \\parma color the color code of the character.) s
5 412 M
( *              \\param row the row position where the character will be putted) s
5 401 M
( *              \\param col the col position where the character will be putted) s
5 390 M
( *) s
5 379 M
( *) s
5 368 M
( */) s
5 357 M
(int putCharAtFixedPos \( int c, int color, int row, int col \);) s
5 324 M
(/**) s
5 313 M
( *      \\fn int putColoredStringAtFixedPos \( char * s, int * color, int length, int row, in) s
5 302 M
(t col  \)) s
5 291 M
( *) s
5 280 M
( *) s
5 269 M
( *              \\brief Puts a string at a given position.) s
5 258 M
( *              ) s
5 247 M
( *              \\param s The string to be putted.) s
5 236 M
( *              \\param color a pointer to int with the color codes for each character or NU) s
5 225 M
(LL to print with the default video color.) s
5 214 M
( *) s
5 203 M
( *) s
5 192 M
( */) s
5 181 M
(int putColoredStringAtFixedPos \( char * s, int * color, int length, int row, int col  \);) s
5 148 M
(/**) s
5 137 M
( *      \\fn void fillScreen \( int c \)) s
5 126 M
( *) s
5 115 M
( *              \\brief Fills the screen with a character) s
5 104 M
( *) s
5 93 M
( *) s
5 82 M
( */) s
5 71 M
(void fillScreen \( int c \);) s
5 38 M
(/**) s
5 27 M
( * \\fn void clearScreen \( void \)) s
5 16 M
( *) s
5 5 M
( *              Clears the screen) s
_R
S
%%Page: (6) 34
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (video_driver.h) def
/fdir () def
/ftail (video_driver.h) def
% User defined strings:
/fmodstr (vie jun 12 14:38:18 2009) def
/pagenumstr (25-6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( *) s
5 731 M
( */) s
5 720 M
(void clearScreen \( void \);) s
5 698 M
(/**) s
5 687 M
( *      \\fn int getVideoTabStop \( void \)) s
5 676 M
( *) s
5 665 M
( *              \\brief Gets the video tab stop) s
5 654 M
( *              ) s
5 643 M
( */) s
5 632 M
(int getVideoTabStop \( void \);) s
5 610 M
(/**) s
5 599 M
( *      \\fn int setVideoTabStop \( int num \)) s
5 588 M
( *) s
5 577 M
( *              \\brief Sets the video tab stop.) s
5 566 M
( *) s
5 555 M
( */) s
5 544 M
(int setVideoTabStop \( int num \); ) s
5 522 M
(/**) s
5 511 M
( *      \\fn int getVideoVTabStop \( void \)) s
5 500 M
( *) s
5 489 M
( *              \\brief Gets the video vertical tab.) s
5 478 M
( *) s
5 467 M
( */) s
5 456 M
(int getVideoVTabStop \( void \);) s
5 434 M
(/**) s
5 423 M
( *      \\fn int setVideoVTabStop \( int num \)) s
5 412 M
( *) s
5 401 M
( *              \\brief Sets the video vertical tab stop) s
5 390 M
( *) s
5 379 M
( */) s
5 368 M
(int setVideoVTabStop \( int num \);) s
5 335 M
(/**) s
5 324 M
( *      \\fn void updateColor \( void  \)) s
5 313 M
( *) s
5 302 M
( *              \\brief Updates the hole screen with actual video color) s
5 291 M
( *              all colors will be changed.) s
5 280 M
( *) s
5 269 M
( */) s
5 258 M
(void updateColor \( void  \);) s
5 236 M
(#endif) s
_R
S
%%Page: (-1) 35
%%BeginPageSetup
_S
18 36 translate
/pagenum -1 def
/fname (Índice) def
/fdir () def
/ftail (Índice) def
% User defined strings:
/fmodstr (vie jun 12 15:40:13 2009) def
/pagenumstr (-1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(  1 colors.h                                   1 pages   23 lines  09/06/05 20:41:15) s
5 731 M
(  2 config.h                                   1 pages   39 lines  09/06/11 15:15:43) s
5 720 M
(  3 defs.h                                     1 pages   59 lines  09/06/05 20:41:15) s
5 709 M
(  4 file.h                                     1 pages   32 lines  09/06/11 15:15:43) s
5 698 M
(  5 int_handlers.h                             1 pages   37 lines  09/06/05 20:41:15) s
5 687 M
(  6 io.h                                       1 pages   56 lines  09/06/05 20:41:15) s
5 676 M
(  7 kasm.h                                     1 pages   22 lines  09/06/05 20:41:15) s
5 665 M
(  8 kc.h                                       1 pages   24 lines  09/06/05 20:41:15) s
5 654 M
(  9 kernel.h                                   1 pages   21 lines  09/06/05 20:41:15) s
5 643 M
( 10 keyboard_adapter.h                         1 pages   14 lines  09/06/12 14:05:49) s
5 632 M
( 11 keyboard_buffer.h                          1 pages   10 lines  09/06/05 20:41:15) s
5 621 M
( 12 keyboard_driver.h                          2 pages   94 lines  09/06/12 14:04:59) s
5 610 M
( 13 mouse_driver.h                             2 pages   88 lines  09/06/12 14:38:18) s
5 599 M
( 14 queue.h                                    1 pages   49 lines  09/06/12 14:07:13) s
5 588 M
( 15 screensaver.h                              1 pages   37 lines  09/06/12 14:09:14) s
5 577 M
( 16 shell.h                                    1 pages   21 lines  09/06/12 14:38:18) s
5 566 M
( 17 stdio.h                                    1 pages   48 lines  09/06/12 14:38:18) s
5 555 M
( 18 string.h                                   1 pages   28 lines  09/06/07 22:16:01) s
5 544 M
( 19 syscall.h                                  1 pages   16 lines  09/06/05 20:41:15) s
5 533 M
( 20 system.h                                   2 pages   81 lines  09/06/12 14:38:18) s
5 522 M
( 21 timerTick.h                                1 pages   15 lines  09/06/11 15:15:43) s
5 511 M
( 22 types.h                                    1 pages   24 lines  09/06/05 20:41:15) s
5 500 M
( 23 unistd.h                                   2 pages   74 lines  09/06/06 19:20:40) s
5 489 M
( 24 video_adapter.h                            1 pages   25 lines  09/06/12 14:38:18) s
5 478 M
( 25 video_driver.h                             6 pages  367 lines  09/06/12 14:38:18) s
_R
S
%%Trailer
%%Pages: 35
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
