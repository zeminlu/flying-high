.TH "inc/bttlship.h" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/bttlship.h \- 
.PP
The header file of the battleship game.  

.SH SYNOPSIS
.br
.PP
\fC#include 'video_driver.h'\fP
.br
\fC#include 'stdio.h'\fP
.br
\fC#include 'string.h'\fP
.br
\fC#include 'types.h'\fP
.br
\fC#include 'process.h'\fP
.br
\fC#include 'shMemory.h'\fP
.br
\fC#include 'semaphore.h'\fP
.br
\fC#include 'rand.h'\fP
.br
\fC#include 'ttys.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBS_TABLE\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBN_X\fP   10"
.br
.ti -1c
.RI "#define \fBN_Y\fP   10"
.br
.ti -1c
.RI "#define \fBN_Z\fP   5"
.br
.ti -1c
.RI "#define \fBN_SHIPS\fP   6"
.br
.ti -1c
.RI "#define \fBINP_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBINP_YX\fP   1"
.br
.ti -1c
.RI "#define \fBLOCK\fP   lockTable(0,1, &table)"
.br
.ti -1c
.RI "#define \fBUNLOCK\fP   lockTable(0,0, &table)"
.br
.ti -1c
.RI "#define \fBWAIT2\fP   lockTable(1,1, &table)"
.br
.ti -1c
.RI "#define \fBNOTIFY2\fP   lockTable(1,0, &table)"
.br
.ti -1c
.RI "#define \fBFLG_P1\fP   001"
.br
.ti -1c
.RI "#define \fBFLG_P2\fP   002"
.br
.ti -1c
.RI "#define \fBFLG_SEEN0\fP   004"
.br
.ti -1c
.RI "#define \fBFLG_SEEN1\fP   010"
.br
.ti -1c
.RI "#define \fBFLG_BOMBD\fP   020"
.br
.ti -1c
.RI "#define \fBFLG_SPLSH\fP   040"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBS_TABLE\fP \fBS_TABLE\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcleanup\fP (\fBkey_t\fP shmid, \fBkey_t\fP semid)"
.br
.RI "\fIDestroys the used shared memory and semaphores. \fP"
.ti -1c
.RI "void \fBattachTable\fP (\fBS_TABLE\fP **table, \fBkey_t\fP shmid, char **shmp)"
.br
.RI "\fIIt attaches itself to the already created memory. \fP"
.ti -1c
.RI "void \fBlockTable\fP (int semx, int block, \fBS_TABLE\fP **tableS)"
.br
.RI "\fIIt decides if it has to lock the table or wait for the opponent. Peform semaphore wait/notifies: ARGUMENTS: semx 0 : table lock semaphore 1 : opponent notify semaphore block 0 : perform notify 1 : perform wait. \fP"
.ti -1c
.RI "void \fBrecount\fP (\fBS_TABLE\fP **tableS, int *flg_game_over)"
.br
.RI "\fIIt counts the amount of bombs that the player has left. \fP"
.ti -1c
.RI "void \fBbomb\fP (int x, int y, \fBS_TABLE\fP **tableS)"
.br
.RI "\fIIt puts the bomb on a specific position of the table. \fP"
.ti -1c
.RI "int \fBgetInput\fP (int *px, int *py, \fBS_TABLE\fP **table)"
.br
.RI "\fIIt obtains the the row and the column of the table from STDIN. \fP"
.ti -1c
.RI "int \fBdraw_hz\fP (int sx, int sy, int z, int who, \fBS_TABLE\fP **tableS)"
.br
.RI "\fIIt draws the horizontal ship. \fP"
.ti -1c
.RI "int \fBdraw_vt\fP (int sx, int sy, int z, int who, \fBS_TABLE\fP **tableS)"
.br
.RI "\fIIt draws the horizontal ship. \fP"
.ti -1c
.RI "void \fBgenBattle\fP (\fBS_TABLE\fP **tableS)"
.br
.RI "\fIIt generates the table. \fP"
.ti -1c
.RI "void \fBshowRow\fP (void)"
.br
.RI "\fIIt prints each row of the table. \fP"
.ti -1c
.RI "void \fBshowBattle\fP (\fBS_TABLE\fP **tableS, int us, int them, int *flg_game_over)"
.br
.RI "\fIIt prints the table of the battlehsip. \fP"
.ti -1c
.RI "int \fBbattleship\fP ()"
.br
.RI "\fIIt's the main process of the battleship, it generates the whole table and ships. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The header file of the battleship game. 

\fBAuthor:\fP
.RS 4
Luciano Zemin, Nicolás Magni, Nicolás Purita 
.RE
.PP

.PP
Definition in file \fBbttlship.h\fP.
.SH "Define Documentation"
.PP 
.SS "#define FLG_BOMBD   020"
.PP
Definition at line 44 of file bttlship.h.
.SS "#define FLG_P1   001"
.PP
Definition at line 40 of file bttlship.h.
.SS "#define FLG_P2   002"
.PP
Definition at line 41 of file bttlship.h.
.SS "#define FLG_SEEN0   004"
.PP
Definition at line 42 of file bttlship.h.
.SS "#define FLG_SEEN1   010"
.PP
Definition at line 43 of file bttlship.h.
.SS "#define FLG_SPLSH   040"
.PP
Definition at line 45 of file bttlship.h.
.SS "#define INP_NONE   0"
.PP
Definition at line 28 of file bttlship.h.
.SS "#define INP_YX   1"
.PP
Definition at line 29 of file bttlship.h.
.SS "#define LOCK   lockTable(0,1, &table)"
.PP
Definition at line 31 of file bttlship.h.
.SS "#define N_SHIPS   6"
.PP
Definition at line 26 of file bttlship.h.
.SS "#define N_X   10"
.PP
Definition at line 23 of file bttlship.h.
.SS "#define N_Y   10"
.PP
Definition at line 24 of file bttlship.h.
.SS "#define N_Z   5"
.PP
Definition at line 25 of file bttlship.h.
.SS "#define NOTIFY2   lockTable(1,0, &table)"
.PP
Definition at line 35 of file bttlship.h.
.SS "#define UNLOCK   lockTable(0,0, &table)"
.PP
Definition at line 32 of file bttlship.h.
.SS "#define WAIT2   lockTable(1,1, &table)"
.PP
Definition at line 34 of file bttlship.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBS_TABLE\fP \fBS_TABLE\fP"
.SH "Function Documentation"
.PP 
.SS "void attachTable (\fBS_TABLE\fP ** table, \fBkey_t\fP shmid, char ** shmp)"
.PP
It attaches itself to the already created memory. \fBParameters:\fP
.RS 4
\fItable\fP The adress of the table. 
.br
\fIshmid\fP The shared memory segment id. 
.br
\fIshmp\fP The adress where to store the shared memory segment pointer. 
.RE
.PP

.PP
Definition at line 195 of file bttlship.c.
.SS "int battleship ()"
.PP
It's the main process of the battleship, it generates the whole table and ships. 
.PP
Definition at line 12 of file bttlship.c.
.SS "void bomb (int x, int y, \fBS_TABLE\fP ** tableS)"
.PP
It puts the bomb on a specific position of the table. \fBParameters:\fP
.RS 4
\fIx\fP The row of the table 
.br
\fIy\fP The column of the table 
.br
\fItableS\fP The address of the table. 
.RE
.PP

.PP
Definition at line 231 of file bttlship.c.
.SS "void cleanup (\fBkey_t\fP shmid, \fBkey_t\fP semid)"
.PP
Destroys the used shared memory and semaphores. \fBParameters:\fP
.RS 4
\fIshmid\fP The id of the shared memory segment. 
.br
\fIsemid\fP The id of the semaphore. 
.RE
.PP

.PP
Definition at line 186 of file bttlship.c.
.SS "int draw_hz (int sx, int sy, int z, int who, \fBS_TABLE\fP ** tableS)"
.PP
It draws the horizontal ship. \fBParameters:\fP
.RS 4
\fIsx\fP Inner use. 
.br
\fIsy\fP Inner use. 
.br
\fIz\fP Inner use. 
.br
\fIwho\fP Iner use. 
.br
\fItableS\fP The address of the table. 
.RE
.PP

.PP
Definition at line 283 of file bttlship.c.
.SS "int draw_vt (int sx, int sy, int z, int who, \fBS_TABLE\fP ** tableS)"
.PP
It draws the horizontal ship. \fBParameters:\fP
.RS 4
\fIsx\fP Inner use. 
.br
\fIsy\fP Inner use. 
.br
\fIz\fP Inner use. 
.br
\fIwho\fP Inner use. 
.br
\fItableS\fP The address of the table. 
.RE
.PP

.PP
Definition at line 320 of file bttlship.c.
.SS "void genBattle (\fBS_TABLE\fP ** tableS)"
.PP
It generates the table. \fBParameters:\fP
.RS 4
\fItableS\fP The address of the table. 
.RE
.PP

.PP
Definition at line 357 of file bttlship.c.
.SS "int getInput (int * px, int * py, \fBS_TABLE\fP ** table)"
.PP
It obtains the the row and the column of the table from STDIN. \fBParameters:\fP
.RS 4
\fIpx\fP The row of the table 
.br
\fIpy\fP The column of the table 
.br
\fItable\fP The address of the table. 
.RE
.PP

.PP
Definition at line 241 of file bttlship.c.
.SS "void lockTable (int semx, int block, \fBS_TABLE\fP ** tableS)"
.PP
It decides if it has to lock the table or wait for the opponent. Peform semaphore wait/notifies: ARGUMENTS: semx 0 : table lock semaphore 1 : opponent notify semaphore block 0 : perform notify 1 : perform wait. \fBParameters:\fP
.RS 4
\fIsemx\fP It is the parameter to decide what have to do with semaphore 
.br
\fIblock\fP It decides what have to do with the table 
.br
\fItableS\fP The adress of the table. 
.RE
.PP

.PP
Definition at line 450 of file bttlship.c.
.SS "void recount (\fBS_TABLE\fP ** tableS, int * flg_game_over)"
.PP
It counts the amount of bombs that the player has left. \fBParameters:\fP
.RS 4
\fItableS\fP The address of the table. 
.br
\fIflg_game_over\fP The adress of the game status. 
.RE
.PP

.PP
Definition at line 210 of file bttlship.c.
.SS "void showBattle (\fBS_TABLE\fP ** tableS, int us, int them, int * flg_game_over)"
.PP
It prints the table of the battlehsip. \fBParameters:\fP
.RS 4
\fItableS\fP The address of the table. 
.br
\fIus\fP Inner use. 
.br
\fIthem\fP Inner use. 
.br
\fIflg_game_over\fP The address of the game status. 
.RE
.PP

.PP
Definition at line 400 of file bttlship.c.
.SS "void showRow (void)"
.PP
It prints each row of the table. 
.PP
Definition at line 389 of file bttlship.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
