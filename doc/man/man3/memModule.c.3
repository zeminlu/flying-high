.TH "src/memModule.c" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/memModule.c \- 
.PP
The memory management / paging module.  

.SH SYNOPSIS
.br
.PP
\fC#include '../inc/memModule.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBgetKernelHeap\fP ()"
.br
.ti -1c
.RI "void \fBloadCR3\fP ()"
.br
.RI "\fILoads the CR3 into the processor register. \fP"
.ti -1c
.RI "int \fBinitPaging\fP ()"
.br
.RI "\fIInitializes the pagination and turns it on. \fP"
.ti -1c
.RI "void \fBsetKernelHeapPresence\fP (int state)"
.br
.RI "\fISets the presence bit of the kernel heap pages according to the given parameter. \fP"
.ti -1c
.RI "void \fBinitPage\fP (\fBpage_t\fP *\fBpage\fP, int isKernel)"
.br
.RI "\fIInitializes the given page with according permissions. \fP"
.ti -1c
.RI "int \fBallocKPage\fP (\fBpage_t\fP *kernelPage)"
.br
.RI "\fIAllocs a Page for the kernel. \fP"
.ti -1c
.RI "int \fBinitKernelTable\fP (\fBpageTable_t\fP kernelTable)"
.br
.RI "\fIInitializes a kernel page table. \fP"
.ti -1c
.RI "int \fBallocMPage\fP (\fBpage_t\fP *mallocPage)"
.br
.RI "\fIAllocs a Page for the malloc section. \fP"
.ti -1c
.RI "int \fBinitMallocTable\fP (\fBpageTable_t\fP mallocTable, int dirIndex)"
.br
.RI "\fIInitializes a malloc page table. \fP"
.ti -1c
.RI "void \fBsetFramePresence\fP (\fBframe_t\fP *\fBframe\fP, int state)"
.br
.RI "\fISets the presence bit of the pages from the given frame to the given state. \fP"
.ti -1c
.RI "\fBframe_t\fP * \fBgetFrame\fP ()"
.br
.RI "\fIGets a free frame. \fP"
.ti -1c
.RI "int \fBfreeFrame\fP (\fBframe_t\fP *\fBframe\fP)"
.br
.RI "\fIFrees the given frame. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The memory management / paging module. 

\fBAuthor:\fP
.RS 4
Luciano Zemin, Nicolás Magni, Nicolás Purita 
.RE
.PP

.PP
Definition in file \fBmemModule.c\fP.
.SH "Function Documentation"
.PP 
.SS "int allocKPage (\fBpage_t\fP * kernelPage)"
.PP
Allocs a Page for the kernel. \fBParameters:\fP
.RS 4
\fIkernelPage\fP A pointer to the page.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 79 of file memModule.c.
.SS "int allocMPage (\fBpage_t\fP * mallocPage)"
.PP
Allocs a Page for the malloc section. \fBParameters:\fP
.RS 4
\fImallocPage\fP A pointer to the page.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 99 of file memModule.c.
.SS "int freeFrame (\fBframe_t\fP * frame)"
.PP
Frees the given frame. \fBParameters:\fP
.RS 4
\fIframe\fP A pointer to the frame.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 155 of file memModule.c.
.SS "\fBframe_t\fP* getFrame ()"
.PP
Gets a free frame. \fBReturns:\fP
.RS 4
A pointer to a frame. 
.RE
.PP

.PP
Definition at line 143 of file memModule.c.
.SS "void* getKernelHeap ()"
.PP
Definition at line 28 of file memModule.c.
.SS "int initKernelTable (\fBpageTable_t\fP kernelTable)"
.PP
Initializes a kernel page table. \fBParameters:\fP
.RS 4
\fIkernelTable\fP The table to be initialized.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 89 of file memModule.c.
.SS "int initMallocTable (\fBpageTable_t\fP mallocTable, int dirIndex)"
.PP
Initializes a malloc page table. \fBParameters:\fP
.RS 4
\fIdirIndex\fP Reserved. 
.br
\fImallocTable\fP The table to be initialized.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 109 of file memModule.c.
.SS "void initPage (\fBpage_t\fP * page, int isKernel)"
.PP
Initializes the given page with according permissions. \fBParameters:\fP
.RS 4
\fIpage\fP A pointer to the page. 
.br
\fIisKernel\fP Permissions, True or False. 
.RE
.PP

.PP
Definition at line 71 of file memModule.c.
.SS "int initPaging ()"
.PP
Initializes the pagination and turns it on. \fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP

.PP
Definition at line 38 of file memModule.c.
.SS "void loadCR3 ()"
.PP
Loads the CR3 into the processor register. 
.PP
Definition at line 32 of file memModule.c.
.SS "void setFramePresence (\fBframe_t\fP * frame, int state)"
.PP
Sets the presence bit of the pages from the given frame to the given state. \fBParameters:\fP
.RS 4
\fIframe\fP A pointer to the frame. 
.br
\fIstate\fP True or False. 
.RE
.PP

.PP
Definition at line 131 of file memModule.c.
.SS "void setKernelHeapPresence (int state)"
.PP
Sets the presence bit of the kernel heap pages according to the given parameter. \fBParameters:\fP
.RS 4
\fIstate\fP True or False. 
.RE
.PP

.PP
Definition at line 67 of file memModule.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
