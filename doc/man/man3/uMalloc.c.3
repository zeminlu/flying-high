.TH "src/uMalloc.c" 3 "18 May 2010" "Version 1.0" "flying-high" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/uMalloc.c \- 
.PP
User malloc module.  

.SH SYNOPSIS
.br
.PP
\fC#include '../inc/uMalloc.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBfree\fP (void *ap)"
.br
.RI "\fIFrees up the user memory pointed by ap for futures mallocs. \fP"
.ti -1c
.RI "void * \fBmalloc\fP (\fBsize_t\fP nbytes)"
.br
.RI "\fIreturns a continuous segment of user memory. It could return null if there is not enough free space. \fP"
.ti -1c
.RI "void * \fBrealloc\fP (void *ap, \fBsize_t\fP size)"
.br
.RI "\fIChanges the original size of the continuous memory. If it is possible, it moves the old segment of user memory to a new continuous user memory segment . \fP"
.in -1c
.SH "Detailed Description"
.PP 
User malloc module. 

\fBAuthor:\fP
.RS 4
Luciano Zemin, Nicolás Magni, Nicolás Purita 
.RE
.PP

.PP
Definition in file \fBuMalloc.c\fP.
.SH "Function Documentation"
.PP 
.SS "void free (void * ap)"
.PP
Frees up the user memory pointed by ap for futures mallocs. \fBParameters:\fP
.RS 4
\fIap\fP Pointer to the logical memory position that would be freed.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmalloc()\fP \fBrealloc()\fP 
.RE
.PP

.PP
Definition at line 16 of file uMalloc.c.
.SS "void* malloc (\fBsize_t\fP nbytes)"
.PP
returns a continuous segment of user memory. It could return null if there is not enough free space. \fBParameters:\fP
.RS 4
\fInbytes\fP The size of continuous memory that would be returned.
.RE
.PP
\fBReturns:\fP
.RS 4
The logical user memory to be used.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBfree()\fP \fBrealloc()\fP 
.RE
.PP

.PP
Definition at line 20 of file uMalloc.c.
.SS "void* realloc (void * ap, \fBsize_t\fP size)"
.PP
Changes the original size of the continuous memory. If it is possible, it moves the old segment of user memory to a new continuous user memory segment . \fBParameters:\fP
.RS 4
\fIap\fP The old position that would be changed if it's necessary. 
.br
\fIsize\fP The new size of the continuous user memory.
.RE
.PP
\fBReturns:\fP
.RS 4
A new continuous segment of user memory.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBfree()\fP \fBmalloc()\fP 
.RE
.PP

.PP
Definition at line 23 of file uMalloc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for flying-high from the source code.
